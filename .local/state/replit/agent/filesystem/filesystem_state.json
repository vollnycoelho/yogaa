{"file_contents":{"design_guidelines.md":{"content":"# Sarvaswasthyam Yoga & Fitness Design Guidelines\n\n## Design Approach\n**Reference-Based:** Drawing inspiration from premium wellness platforms (Calm, Peloton, Mindbody) with emphasis on tranquility, energy, and trust. Focus on creating a serene yet motivating experience that balances calmness with action.\n\n## Core Design Principles\n- **Wellness-First Aesthetics:** Calming, natural palette with energizing accents\n- **Clarity Over Clutter:** Clean layouts with purposeful whitespace for mindfulness\n- **Trust & Credibility:** Professional polish for booking and payment confidence\n- **Dual Experience:** Serene for users, efficient for admins\n\n## Color Palette\n\n**Light Mode:**\n- Primary: 150 45% 45% (Calming sage/teal - yoga/nature)\n- Secondary: 280 30% 60% (Soft purple - spirituality/balance)\n- Accent: 25 85% 60% (Warm coral - energy/vitality)\n- Neutral: 210 15% 25% (Deep charcoal for text)\n- Background: 40 40% 98% (Warm off-white)\n\n**Dark Mode:**\n- Primary: 150 40% 55% (Lighter sage for contrast)\n- Secondary: 280 35% 70%\n- Accent: 25 75% 65%\n- Neutral: 210 15% 85%\n- Background: 210 20% 10% (Deep navy-black)\n\n## Typography\n- **Primary Font:** 'Inter' (Google Fonts) - headings, navigation, buttons\n- **Secondary Font:** 'Lora' (Google Fonts) - body text, descriptions (adds warmth)\n- **Heading Scale:** text-5xl/4xl/3xl/2xl/xl with font-semibold\n- **Body:** text-base with leading-relaxed for readability\n\n## Layout System\n**Spacing:** Use Tailwind units of 2, 4, 6, 8, 12, 16, 20, 24\n- Micro: 2, 4 (tight internal component spacing)\n- Standard: 6, 8 (component padding, gaps)\n- Generous: 12, 16 (section spacing, margins)\n- Dramatic: 20, 24 (major section breaks)\n\n**Containers:** max-w-7xl for content, max-w-4xl for forms/text blocks\n\n## Component Library\n\n### Navigation\n- Fixed transparent navbar with blur backdrop on scroll\n- Logo left, nav center, profile/login right\n- Role-based menu items (admin dashboard only for admins)\n- Mobile: hamburger with slide-out drawer\n\n### Hero Section (Home)\n- Full-width 85vh hero with large lifestyle yoga image (serene studio/outdoor setting)\n- Overlay gradient (dark bottom fade for text contrast)\n- Centered heading + subheading + dual CTA buttons\n- Primary CTA (solid accent), Secondary CTA (outline with backdrop blur)\n\n### Session Cards\n- Card-based grid (grid-cols-1 md:grid-cols-2 lg:grid-cols-3)\n- Session image at top, rounded-t-lg\n- Content padding p-6 with session name, instructor, time, level badge\n- Hover: subtle lift (translate-y-1) and shadow increase\n- Availability indicator (green dot + text)\n\n### Booking Modal\n- Multi-step wizard with progress indicator at top\n- Step 1: Session details + calendar picker\n- Step 2: User info form\n- Step 3: Payment simulation\n- Footer buttons: Back (secondary) + Continue/Book (primary)\n\n### Video Library\n- Masonry-style grid (not uniform grid - varied heights)\n- Thumbnail with play overlay icon\n- Video title + duration + difficulty level\n- Modal player: YouTube iframe centered with close button\n\n### Dashboards\n**User Dashboard:**\n- Welcome section with name + quick stats (upcoming/completed sessions)\n- Booking cards in timeline layout with cancel option\n- Profile management card\n\n**Admin Dashboard:**\n- Top row: Stat cards (4 columns) - bookings, revenue, users, sessions\n- Charts section: Line graph for bookings trend\n- Recent bookings table with action buttons\n- Session management: Create/Edit forms in modal, list view with inline edit\n\n### Forms\n- Floating labels on focus\n- Input styling: border-2, rounded-lg, px-4 py-3\n- Validation: Error messages in text-sm text-red-500 below inputs\n- Success states: Green border + checkmark icon\n\n### Buttons\n- Primary: bg-accent with white text, rounded-lg, px-6 py-3\n- Secondary: border-2 with primary color, transparent bg\n- Icon buttons: Rounded-full with hover bg change\n- No hover states for outline buttons on images (built-in)\n\n### Icons\nUse Heroicons (outline style) via CDN for:\n- Navigation icons (home, calendar, video, user, settings)\n- Action icons (play, edit, delete, check, x)\n- Status indicators (check-circle, x-circle, clock)\n\n## Page-Specific Design\n\n### Home/Landing\n- Hero with image + CTA\n- Benefits section: 3-column icon + heading + text cards\n- Featured sessions: Horizontal scroll card row\n- Testimonials: 2-column with photos\n- CTA section: Centered with class schedule teaser\n- Footer: Links, social icons, newsletter signup\n\n### Sessions Page\n- Filter sidebar (left): Category checkboxes, level select, time range\n- Main grid (right): Session cards with availability\n- Sticky filter button on mobile\n\n### Exercises Page\n- Search bar at top\n- Category tabs (Beginner/Intermediate/Advanced)\n- Video grid with play overlay\n- VideoModal: Centered iframe with close X, video title above\n\n### Login Page\n- Centered card (max-w-md) on gradient background\n- Tab switcher: User | Admin\n- Form fields with floating labels\n- Remember me checkbox\n- Primary CTA button full-width\n\n## Images\n**Hero Image:** Full-width yoga studio or outdoor yoga session (peaceful, professional, diverse practitioners) - conveys serenity and community\n\n**Session Cards:** Each session needs a representative image (studio classes, outdoor sessions, meditation spaces) - use consistent styling\n\n**Exercise Thumbnails:** YouTube video thumbnails via iframe API\n\n**Testimonials:** Circular headshots (rounded-full) with name + quote\n\n**Optional/Supporting:** Instructor photos, studio space gallery, lifestyle imagery for benefits section\n\n## Animations\n**Minimal approach:**\n- Fade-in on scroll for sections (only on landing page)\n- Button hover scale (scale-105)\n- Card hover lift (translate-y-1)\n- Modal entrance: fade + scale animation\n- NO parallax, NO complex scroll-driven effects\n\n## Accessibility\n- Dark mode fully implemented across all components\n- Focus visible states on all interactive elements\n- ARIA labels for icons and actions\n- Color contrast meets WCAG AA standards\n- Keyboard navigation support for modals and forms","size_bytes":6002},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Sarvaswasthyam Yoga & Fitness\n\nA full-stack React web application for yoga session booking and exercise library management with role-based access control.\n\n## Overview\n\nSarvaswasthyam is a comprehensive yoga and fitness platform built with React, Express, and PostgreSQL. It features user authentication, session booking with payment simulation, an exercise video library, and separate dashboards for users and administrators.\n\n## Architecture\n\n### Frontend\n- **Framework**: React with TypeScript\n- **Routing**: Wouter for client-side routing\n- **State Management**: TanStack Query (React Query) for server state\n- **UI Components**: Shadcn UI with Radix UI primitives\n- **Styling**: Tailwind CSS with custom design system\n- **Forms**: React Hook Form with Zod validation\n\n### Backend\n- **Server**: Express.js with TypeScript\n- **Database**: PostgreSQL (Neon) with Drizzle ORM\n- **Authentication**: Express Session with secure session management\n- **Password Security**: bcrypt for password hashing\n- **API Design**: RESTful API with proper error handling\n\n### Design System\n- **Primary Color**: Sage/Teal (150 45% 45%) for wellness aesthetics\n- **Secondary Color**: Soft Purple (280 30% 60%)\n- **Accent Color**: Warm Coral (25 85% 60%)\n- **Typography**: Inter for headings, Lora for body text\n- **Dark Mode**: Full dark mode support\n\n## Features\n\n### User Features\n- **Authentication**: Secure login/registration with hashed passwords\n- **Session Browsing**: Filter sessions by category and difficulty level\n- **Booking System**: Multi-step booking flow with payment simulation\n- **Exercise Library**: Video library with search and filtering\n- **User Dashboard**: View and manage bookings\n\n### Admin Features\n- **Session Management**: Create, update, and delete yoga sessions\n- **Booking Overview**: View all user bookings and revenue\n- **Announcements**: Create announcements for users\n- **Analytics**: Dashboard with key metrics\n\n## Database Schema\n\n### Users\n- id (UUID, primary key)\n- username (unique)\n- password (bcrypt hashed)\n- email\n- role (user/admin)\n- fullName\n\n### Sessions\n- id (UUID)\n- title, description\n- instructor, category, level\n- duration, maxParticipants, currentParticipants\n- price, schedule\n- imageUrl\n\n### Bookings\n- id (UUID)\n- userId, sessionId\n- sessionDate\n- status (confirmed/cancelled)\n\n### Exercises\n- id (UUID)\n- title, description\n- videoUrl, duration\n- level, category\n- thumbnailUrl\n\n### Announcements\n- id (UUID)\n- title, content\n- authorId\n\n## Security\n\n- **Password Hashing**: All passwords are hashed using bcrypt with salt rounds of 10\n- **Session Management**: Secure session cookies with HTTP-only flags\n- **Authentication**: Protected routes with role-based access control\n- **Input Validation**: Zod schemas for all API inputs\n\n## Test Credentials\n\n**Admin Account:**\n- Username: admin\n- Password: admin123\n\n**User Account:**\n- Username: user\n- Password: user123\n\n## API Routes\n\n### Authentication\n- POST /api/auth/register - Register new user\n- POST /api/auth/login - Login user\n- POST /api/auth/logout - Logout user\n- GET /api/auth/me - Get current user\n\n### Sessions\n- GET /api/sessions - Get all sessions\n- GET /api/sessions/:id - Get session by ID\n- POST /api/sessions - Create session (admin only)\n- PATCH /api/sessions/:id - Update session (admin only)\n- DELETE /api/sessions/:id - Delete session (admin only)\n\n### Bookings\n- GET /api/bookings - Get user's bookings\n- POST /api/bookings - Create booking\n- DELETE /api/bookings/:id - Cancel booking\n\n### Exercises\n- GET /api/exercises - Get all exercises\n- POST /api/exercises - Create exercise (admin only)\n- PATCH /api/exercises/:id - Update exercise (admin only)\n- DELETE /api/exercises/:id - Delete exercise (admin only)\n\n### Announcements\n- GET /api/announcements - Get all announcements\n- POST /api/announcements - Create announcement (admin only)\n- DELETE /api/announcements/:id - Delete announcement (admin only)\n\n## Development\n\n### Setup\n1. PostgreSQL database is automatically configured\n2. Run `tsx server/seed.ts` to seed initial data\n3. Run `npm run dev` to start the application\n4. Frontend runs on port 5000\n\n### File Structure\n- `/client` - React frontend\n  - `/src/pages` - Page components\n  - `/src/components` - Reusable components\n  - `/src/contexts` - React contexts (Auth)\n- `/server` - Express backend\n  - `routes.ts` - API routes\n  - `storage.ts` - Database operations\n  - `seed.ts` - Database seeding\n- `/shared` - Shared types and schemas\n\n## Recent Changes\n\n### 2024-10-02: Backend Integration & Security\n- ✅ Set up PostgreSQL database with Drizzle ORM\n- ✅ Implemented complete storage layer with CRUD operations\n- ✅ Built RESTful API for all features\n- ✅ Connected frontend to backend APIs\n- ✅ Fixed critical security vulnerability: implemented bcrypt password hashing\n- ✅ Added password verification during login\n- ✅ Re-seeded database with securely hashed passwords\n","size_bytes":4917},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"// import { Pool, neonConfig } from '@neondatabase/serverless';\n// import { drizzle } from 'drizzle-orm/neon-serverless';\n// import ws from \"ws\";\n// import * as schema from \"@shared/schema\";\n\n// neonConfig.webSocketConstructor = ws;\n\n// if (!process.env.DATABASE_URL) {\n//   throw new Error(\n//     \"DATABASE_URL must be set. Did you forget to provision a database?\",\n//   );\n// }\n\n// export const pool = new Pool({ connectionString: process.env.DATABASE_URL });\n// export const db = drizzle({ client: pool, schema });\n","size_bytes":519},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Session configuration\napp.use(\n  session({\n    secret: process.env.SESSION_SECRET || \"yoga-fitness-secret-key\",\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      secure: process.env.NODE_ENV === \"production\",\n      httpOnly: true,\n      maxAge: 1000 * 60 * 60 * 24 * 7, // 1 week\n    },\n  })\n);\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    const url = process.env.REPLIT_DEV_DOMAIN \n      ? `https://${process.env.REPLIT_DEV_DOMAIN}`\n      : `http://localhost:${port}`;\n    log(`serving on port ${port}`);\n    console.log(`\\n🚀 Application ready at: ${url}\\n`);\n  });\n})();\n","size_bytes":2615},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertSessionSchema, updateSessionSchema, insertBookingSchema, insertExerciseSchema, insertAnnouncementSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport \"./types\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Authentication routes\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      const existingUser = await storage.getUserByUsername(userData.username);\n      \n      if (existingUser) {\n        return res.status(400).json({ error: \"Username already exists\" });\n      }\n\n      const user = await storage.createUser(userData);\n      \n      // Store user in session\n      if (req.session) {\n        req.session.userId = user.id;\n      }\n      \n      res.json({ \n        id: user.id, \n        username: user.username, \n        email: user.email,\n        role: user.role,\n        fullName: user.fullName \n      });\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid user data\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      const user = await storage.getUserByUsername(username);\n      \n      if (!user) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n\n      const isPasswordValid = await storage.verifyPassword(password, user.password);\n      \n      if (!isPasswordValid) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n\n      // Store user in session\n      if (req.session) {\n        req.session.userId = user.id;\n      }\n      \n      res.json({ \n        id: user.id, \n        username: user.username, \n        email: user.email,\n        role: user.role,\n        fullName: user.fullName \n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Login failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", async (req, res) => {\n    if (req.session) {\n      req.session.destroy((err: any) => {\n        if (err) {\n          return res.status(500).json({ error: \"Logout failed\" });\n        }\n        res.json({ success: true });\n      });\n    } else {\n      res.json({ success: true });\n    }\n  });\n\n  app.get(\"/api/auth/me\", async (req, res) => {\n    if (!req.session?.userId) {\n      return res.status(401).json({ error: \"Not authenticated\" });\n    }\n\n    const user = await storage.getUser(req.session.userId);\n    if (!user) {\n      return res.status(404).json({ error: \"User not found\" });\n    }\n\n    res.json({ \n      id: user.id, \n      username: user.username, \n      email: user.email,\n      role: user.role,\n      fullName: user.fullName \n    });\n  });\n\n  // Session routes\n  app.get(\"/api/sessions\", async (req, res) => {\n    try {\n      const sessions = await storage.getSessions();\n      res.json(sessions);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch sessions\" });\n    }\n  });\n\n  app.get(\"/api/sessions/:id\", async (req, res) => {\n    try {\n      const session = await storage.getSession(req.params.id);\n      if (!session) {\n        return res.status(404).json({ error: \"Session not found\" });\n      }\n      res.json(session);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch session\" });\n    }\n  });\n\n  app.post(\"/api/sessions\", async (req, res) => {\n    try {\n      if (!req.session?.userId) {\n        return res.status(401).json({ error: \"Not authenticated\" });\n      }\n\n      const user = await storage.getUser(req.session.userId);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ error: \"Unauthorized\" });\n      }\n\n      const sessionData = insertSessionSchema.parse(req.body);\n      const session = await storage.createSession(sessionData);\n      res.json(session);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid session data\" });\n    }\n  });\n\n  app.patch(\"/api/sessions/:id\", async (req, res) => {\n    try {\n      if (!req.session?.userId) {\n        return res.status(401).json({ error: \"Not authenticated\" });\n      }\n\n      const user = await storage.getUser(req.session.userId);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ error: \"Unauthorized\" });\n      }\n\n      const session = await storage.updateSession(req.params.id, req.body);\n      if (!session) {\n        return res.status(404).json({ error: \"Session not found\" });\n      }\n      res.json(session);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to update session\" });\n    }\n  });\n\n  app.delete(\"/api/sessions/:id\", async (req, res) => {\n    try {\n      if (!req.session?.userId) {\n        return res.status(401).json({ error: \"Not authenticated\" });\n      }\n\n      const user = await storage.getUser(req.session.userId);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ error: \"Unauthorized\" });\n      }\n\n      const deleted = await storage.deleteSession(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Session not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete session\" });\n    }\n  });\n\n  // Booking routes\n  app.get(\"/api/bookings\", async (req, res) => {\n    try {\n      if (!req.session?.userId) {\n        return res.status(401).json({ error: \"Not authenticated\" });\n      }\n\n      const user = await storage.getUser(req.session.userId);\n      if (user?.role === 'admin') {\n        const bookings = await storage.getBookings();\n        res.json(bookings);\n      } else {\n        const bookings = await storage.getBookingsByUser(req.session.userId);\n        res.json(bookings);\n      }\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch bookings\" });\n    }\n  });\n\n  app.post(\"/api/bookings\", async (req, res) => {\n    try {\n      if (!req.session?.userId) {\n        return res.status(401).json({ error: \"Not authenticated\" });\n      }\n\n      const bookingData = insertBookingSchema.parse({\n        ...req.body,\n        userId: req.session.userId\n      });\n\n      const booking = await storage.createBooking(bookingData);\n      \n      // Update session participant count\n      const yogaSession = await storage.getSession(booking.sessionId);\n      if (yogaSession) {\n        await storage.updateSession(booking.sessionId, {\n          currentParticipants: yogaSession.currentParticipants + 1\n        });\n      }\n\n      res.json(booking);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid booking data\" });\n    }\n  });\n\n  app.delete(\"/api/bookings/:id\", async (req, res) => {\n    try {\n      if (!req.session?.userId) {\n        return res.status(401).json({ error: \"Not authenticated\" });\n      }\n\n      const booking = await storage.getBooking(req.params.id);\n      if (!booking) {\n        return res.status(404).json({ error: \"Booking not found\" });\n      }\n\n      const user = await storage.getUser(req.session.userId);\n      if (booking.userId !== req.session.userId && user?.role !== 'admin') {\n        return res.status(403).json({ error: \"Unauthorized\" });\n      }\n\n      const deleted = await storage.deleteBooking(req.params.id);\n      \n      // Update session participant count\n      const yogaSession = await storage.getSession(booking.sessionId);\n      if (yogaSession && yogaSession.currentParticipants > 0) {\n        await storage.updateSession(booking.sessionId, {\n          currentParticipants: yogaSession.currentParticipants - 1\n        });\n      }\n\n      res.json({ success: deleted });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete booking\" });\n    }\n  });\n\n  // Exercise routes\n  app.get(\"/api/exercises\", async (req, res) => {\n    try {\n      const exercises = await storage.getExercises();\n      res.json(exercises);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch exercises\" });\n    }\n  });\n\n  app.post(\"/api/exercises\", async (req, res) => {\n    try {\n      if (!req.session?.userId) {\n        return res.status(401).json({ error: \"Not authenticated\" });\n      }\n\n      const user = await storage.getUser(req.session.userId);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ error: \"Unauthorized\" });\n      }\n\n      const exerciseData = insertExerciseSchema.parse(req.body);\n      const exercise = await storage.createExercise(exerciseData);\n      res.json(exercise);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid exercise data\" });\n    }\n  });\n\n  app.delete(\"/api/exercises/:id\", async (req, res) => {\n    try {\n      if (!req.session?.userId) {\n        return res.status(401).json({ error: \"Not authenticated\" });\n      }\n\n      const user = await storage.getUser(req.session.userId);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ error: \"Unauthorized\" });\n      }\n\n      const deleted = await storage.deleteExercise(req.params.id);\n      res.json({ success: deleted });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete exercise\" });\n    }\n  });\n\n  // Announcement routes\n  app.get(\"/api/announcements\", async (req, res) => {\n    try {\n      const announcements = await storage.getAnnouncements();\n      res.json(announcements);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch announcements\" });\n    }\n  });\n\n  app.post(\"/api/announcements\", async (req, res) => {\n    try {\n      if (!req.session?.userId) {\n        return res.status(401).json({ error: \"Not authenticated\" });\n      }\n\n      const user = await storage.getUser(req.session.userId);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ error: \"Unauthorized\" });\n      }\n\n      const announcementData = insertAnnouncementSchema.parse({\n        ...req.body,\n        authorId: req.session.userId\n      });\n\n      const announcement = await storage.createAnnouncement(announcementData);\n      res.json(announcement);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid announcement data\" });\n    }\n  });\n\n  app.delete(\"/api/announcements/:id\", async (req, res) => {\n    try {\n      if (!req.session?.userId) {\n        return res.status(401).json({ error: \"Not authenticated\" });\n      }\n\n      const user = await storage.getUser(req.session.userId);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ error: \"Unauthorized\" });\n      }\n\n      const deleted = await storage.deleteAnnouncement(req.params.id);\n      res.json({ success: deleted });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete announcement\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":10819},"server/seed.ts":{"content":"import { storage } from \"./storage\";\n\nasync function seed() {\n  console.log(\"Seeding database...\");\n\n  // Create test users\n  const adminUser = await storage.createUser({\n    username: \"admin\",\n    password: \"admin123\",\n    email: \"admin@sarvaswasthyam.com\",\n    role: \"admin\",\n    fullName: \"Admin User\",\n  });\n\n  const testUser = await storage.createUser({\n    username: \"user\",\n    password: \"user123\",\n    email: \"user@sarvaswasthyam.com\",\n    role: \"user\",\n    fullName: \"Test User\",\n  });\n\n  console.log(\"✓ Created users\");\n\n  // Create yoga sessions\n  const sessions = [\n    {\n      title: \"Morning Hatha Yoga\",\n      description: \"Start your day with energizing Hatha yoga poses\",\n      instructor: \"Priya Sharma\",\n      category: \"Hatha\",\n      level: \"Beginner\",\n      duration: 60,\n      maxParticipants: 15,\n      price: 25,\n      schedule: \"Mon, Wed, Fri 7AM\",\n      imageUrl: \"/images/hatha.jpg\",\n    },\n    {\n      title: \"Mindful Meditation\",\n      description: \"Find inner peace through guided meditation\",\n      instructor: \"Arjun Patel\",\n      category: \"Meditation\",\n      level: \"All Levels\",\n      duration: 45,\n      maxParticipants: 20,\n      price: 20,\n      schedule: \"Daily 6PM\",\n      imageUrl: \"/images/meditation.jpg\",\n    },\n    {\n      title: \"Power Vinyasa Flow\",\n      description: \"Dynamic flowing sequences for strength and flexibility\",\n      instructor: \"Maya Singh\",\n      category: \"Vinyasa\",\n      level: \"Advanced\",\n      duration: 75,\n      maxParticipants: 15,\n      price: 35,\n      schedule: \"Tue, Thu 8AM\",\n      imageUrl: \"/images/vinyasa.jpg\",\n    },\n    {\n      title: \"Restorative Yoga\",\n      description: \"Gentle poses for deep relaxation and stress relief\",\n      instructor: \"Priya Sharma\",\n      category: \"Restorative\",\n      level: \"Beginner\",\n      duration: 60,\n      maxParticipants: 12,\n      price: 28,\n      schedule: \"Wed, Sat 5PM\",\n      imageUrl: \"/images/restorative.jpg\",\n    },\n    {\n      title: \"Ashtanga Primary Series\",\n      description: \"Traditional Ashtanga sequence for building discipline\",\n      instructor: \"Raj Kumar\",\n      category: \"Ashtanga\",\n      level: \"Intermediate\",\n      duration: 90,\n      maxParticipants: 12,\n      price: 40,\n      schedule: \"Mon, Thu 6AM\",\n      imageUrl: \"/images/ashtanga.jpg\",\n    },\n    {\n      title: \"Yin Yoga & Breathwork\",\n      description: \"Deep stretches combined with conscious breathing\",\n      instructor: \"Ananya Reddy\",\n      category: \"Yin\",\n      level: \"All Levels\",\n      duration: 75,\n      maxParticipants: 15,\n      price: 30,\n      schedule: \"Tue, Fri 7PM\",\n      imageUrl: \"/images/yin.jpg\",\n    },\n  ];\n\n  for (const sessionData of sessions) {\n    await storage.createSession(sessionData);\n  }\n\n  console.log(\"✓ Created yoga sessions\");\n\n  // Create exercises\n  const exercises = [\n    {\n      title: \"Sun Salutation Flow\",\n      description: \"Learn the classic sun salutation sequence for morning energy and vitality\",\n      videoUrl: \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\n      duration: 15,\n      level: \"Beginner\",\n      category: \"Vinyasa\",\n      thumbnailUrl: \"/images/sun-salutation.jpg\",\n    },\n    {\n      title: \"Warrior Pose Series\",\n      description: \"Build strength and stability with warrior pose variations\",\n      videoUrl: \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\n      duration: 20,\n      level: \"Intermediate\",\n      category: \"Strength\",\n      thumbnailUrl: \"/images/warrior.jpg\",\n    },\n    {\n      title: \"Deep Relaxation & Savasana\",\n      description: \"Master the art of deep relaxation and conscious rest\",\n      videoUrl: \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\n      duration: 12,\n      level: \"Beginner\",\n      category: \"Relaxation\",\n      thumbnailUrl: \"/images/savasana.jpg\",\n    },\n    {\n      title: \"Core Strengthening Flow\",\n      description: \"Develop core strength through dynamic yoga movements\",\n      videoUrl: \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\n      duration: 25,\n      level: \"Advanced\",\n      category: \"Strength\",\n      thumbnailUrl: \"/images/core.jpg\",\n    },\n    {\n      title: \"Breathing Techniques (Pranayama)\",\n      description: \"Master essential breathing techniques for energy and calm\",\n      videoUrl: \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\n      duration: 18,\n      level: \"Beginner\",\n      category: \"Breathwork\",\n      thumbnailUrl: \"/images/pranayama.jpg\",\n    },\n    {\n      title: \"Balance & Inversions\",\n      description: \"Challenge yourself with advanced balancing poses and inversions\",\n      videoUrl: \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\n      duration: 30,\n      level: \"Advanced\",\n      category: \"Balance\",\n      thumbnailUrl: \"/images/inversions.jpg\",\n    },\n  ];\n\n  for (const exerciseData of exercises) {\n    await storage.createExercise(exerciseData);\n  }\n\n  console.log(\"✓ Created exercises\");\n\n  // Create announcement\n  await storage.createAnnouncement({\n    title: \"Welcome to Sarvaswasthyam\",\n    content: \"Join us for our grand opening week with special discounted rates on all sessions!\",\n    authorId: adminUser.id,\n  });\n\n  console.log(\"✓ Created announcement\");\n  console.log(\"\\nSeed completed successfully!\");\n  console.log(\"\\nTest credentials:\");\n  console.log(\"Admin - username: admin, password: admin123\");\n  console.log(\"User - username: user, password: user123\");\n}\n\nseed()\n  .then(() => process.exit(0))\n  .catch((error) => {\n    console.error(\"Seed failed:\", error);\n    process.exit(1);\n  });\n","size_bytes":5487},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser,\n  type Session,\n  type InsertSession,\n  type Booking,\n  type InsertBooking,\n  type Exercise,\n  type InsertExercise,\n  type Announcement,\n  type InsertAnnouncement\n} from \"@shared/schema\";\nimport bcrypt from \"bcryptjs\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  verifyPassword(password: string, hashedPassword: string): Promise<boolean>;\n  \n  // Session methods\n  getSessions(): Promise<Session[]>;\n  getSession(id: string): Promise<Session | undefined>;\n  createSession(session: InsertSession): Promise<Session>;\n  updateSession(id: string, session: Partial<Omit<Session, 'id'>>): Promise<Session | undefined>;\n  deleteSession(id: string): Promise<boolean>;\n  \n  // Booking methods\n  getBookings(): Promise<Booking[]>;\n  getBookingsByUser(userId: string): Promise<Booking[]>;\n  getBooking(id: string): Promise<Booking | undefined>;\n  createBooking(booking: InsertBooking): Promise<Booking>;\n  updateBooking(id: string, booking: Partial<InsertBooking>): Promise<Booking | undefined>;\n  deleteBooking(id: string): Promise<boolean>;\n  \n  // Exercise methods\n  getExercises(): Promise<Exercise[]>;\n  getExercise(id: string): Promise<Exercise | undefined>;\n  createExercise(exercise: InsertExercise): Promise<Exercise>;\n  updateExercise(id: string, exercise: Partial<InsertExercise>): Promise<Exercise | undefined>;\n  deleteExercise(id: string): Promise<boolean>;\n  \n  // Announcement methods\n  getAnnouncements(): Promise<Announcement[]>;\n  createAnnouncement(announcement: InsertAnnouncement): Promise<Announcement>;\n  deleteAnnouncement(id: string): Promise<boolean>;\n}\n\n// In-memory storage implementation\nexport class InMemoryStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private sessions: Map<string, Session> = new Map();\n  private bookings: Map<string, Booking> = new Map();\n  private exercises: Map<string, Exercise> = new Map();\n  private announcements: Map<string, Announcement> = new Map();\n\n  constructor() {\n    this.seedData();\n  }\n\n  private generateId(): string {\n    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private async seedData() {\n    // Create demo admin user\n    const adminId = this.generateId();\n    const adminPassword = await bcrypt.hash(\"admin123\", 10);\n    this.users.set(adminId, {\n      id: adminId,\n      username: \"admin\",\n      email: \"admin@yoga.com\",\n      password: adminPassword,\n      role: \"admin\",\n      fullName: \"Admin User\",\n      createdAt: new Date(),\n    });\n\n    // Create demo regular user\n    const userId = this.generateId();\n    const userPassword = await bcrypt.hash(\"user123\", 10);\n    this.users.set(userId, {\n      id: userId,\n      username: \"user\",\n      email: \"user@yoga.com\",\n      password: userPassword,\n      role: \"user\",\n      fullName: \"Demo User\",\n      createdAt: new Date(),\n    });\n\n    // Create demo sessions\n    const session1Id = this.generateId();\n    this.sessions.set(session1Id, {\n      id: session1Id,\n      title: \"Morning Vinyasa Flow\",\n      description: \"Start your day with an energizing vinyasa flow practice\",\n      instructor: \"Sarah Johnson\",\n      date: new Date(\"2025-10-15\"),\n      startTime: \"07:00\",\n      endTime: \"08:00\",\n      level: \"intermediate\",\n      maxParticipants: 20,\n      currentParticipants: 8,\n      location: \"Studio A\",\n      createdAt: new Date(),\n    });\n\n    const session2Id = this.generateId();\n    this.sessions.set(session2Id, {\n      id: session2Id,\n      title: \"Gentle Hatha Yoga\",\n      description: \"A gentle practice suitable for all levels\",\n      instructor: \"Mike Chen\",\n      date: new Date(\"2025-10-16\"),\n      startTime: \"10:00\",\n      endTime: \"11:00\",\n      level: \"beginner\",\n      maxParticipants: 15,\n      currentParticipants: 5,\n      location: \"Studio B\",\n      createdAt: new Date(),\n    });\n\n    const session3Id = this.generateId();\n    this.sessions.set(session3Id, {\n      id: session3Id,\n      title: \"Power Yoga\",\n      description: \"High-intensity yoga for strength and stamina\",\n      instructor: \"Emma Davis\",\n      date: new Date(\"2025-10-17\"),\n      startTime: \"18:00\",\n      endTime: \"19:00\",\n      level: \"advanced\",\n      maxParticipants: 12,\n      currentParticipants: 3,\n      location: \"Studio A\",\n      createdAt: new Date(),\n    });\n\n    // Create demo exercises\n    const exercise1Id = this.generateId();\n    this.exercises.set(exercise1Id, {\n      id: exercise1Id,\n      name: \"Downward Dog\",\n      description: \"A foundational pose that stretches and strengthens the body\",\n      category: \"strength\",\n      difficulty: \"beginner\",\n      duration: 60,\n      videoUrl: \"https://example.com/downward-dog\",\n      imageUrl: \"https://images.unsplash.com/photo-1544367567-0f2fcb009e0b\",\n      createdAt: new Date(),\n    });\n\n    const exercise2Id = this.generateId();\n    this.exercises.set(exercise2Id, {\n      id: exercise2Id,\n      name: \"Warrior II\",\n      description: \"Build strength and stability in the legs and core\",\n      category: \"strength\",\n      difficulty: \"intermediate\",\n      duration: 45,\n      videoUrl: \"https://example.com/warrior-2\",\n      imageUrl: \"https://images.unsplash.com/photo-1588286840104-8957b019727f\",\n      createdAt: new Date(),\n    });\n\n    // Create demo announcements\n    const announcement1Id = this.generateId();\n    this.announcements.set(announcement1Id, {\n      id: announcement1Id,\n      title: \"Welcome to Our Yoga Studio!\",\n      content: \"We're excited to have you join our community. Check out our class schedule and book your first session today!\",\n      authorId: adminId,\n      createdAt: new Date(),\n    });\n\n    const announcement2Id = this.generateId();\n    this.announcements.set(announcement2Id, {\n      id: announcement2Id,\n      title: \"New Advanced Classes Added\",\n      content: \"We've added new advanced level classes for experienced practitioners. Book now to secure your spot!\",\n      authorId: adminId,\n      createdAt: new Date(),\n    });\n  }\n\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(u => u.username === username);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.generateId();\n    const hashedPassword = await bcrypt.hash(insertUser.password, 10);\n    const user: User = {\n      id,\n      ...insertUser,\n      password: hashedPassword,\n      createdAt: new Date(),\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async verifyPassword(password: string, hashedPassword: string): Promise<boolean> {\n    return bcrypt.compare(password, hashedPassword);\n  }\n\n  // Session methods\n  async getSessions(): Promise<Session[]> {\n    return Array.from(this.sessions.values()).sort((a, b) => \n      new Date(a.date).getTime() - new Date(b.date).getTime()\n    );\n  }\n\n  async getSession(id: string): Promise<Session | undefined> {\n    return this.sessions.get(id);\n  }\n\n  async createSession(insertSession: InsertSession): Promise<Session> {\n    const id = this.generateId();\n    const session: Session = {\n      id,\n      ...insertSession,\n      currentParticipants: 0,\n      createdAt: new Date(),\n    };\n    this.sessions.set(id, session);\n    return session;\n  }\n\n  async updateSession(id: string, updateData: Partial<Omit<Session, 'id'>>): Promise<Session | undefined> {\n    const session = this.sessions.get(id);\n    if (!session) return undefined;\n    \n    const updatedSession = { ...session, ...updateData };\n    this.sessions.set(id, updatedSession);\n    return updatedSession;\n  }\n\n  async deleteSession(id: string): Promise<boolean> {\n    return this.sessions.delete(id);\n  }\n\n  // Booking methods\n  async getBookings(): Promise<Booking[]> {\n    return Array.from(this.bookings.values());\n  }\n\n  async getBookingsByUser(userId: string): Promise<Booking[]> {\n    return Array.from(this.bookings.values()).filter(b => b.userId === userId);\n  }\n\n  async getBooking(id: string): Promise<Booking | undefined> {\n    return this.bookings.get(id);\n  }\n\n  async createBooking(insertBooking: InsertBooking): Promise<Booking> {\n    const id = this.generateId();\n    const booking: Booking = {\n      id,\n      ...insertBooking,\n      createdAt: new Date(),\n    };\n    this.bookings.set(id, booking);\n    return booking;\n  }\n\n  async updateBooking(id: string, updateData: Partial<InsertBooking>): Promise<Booking | undefined> {\n    const booking = this.bookings.get(id);\n    if (!booking) return undefined;\n    \n    const updatedBooking = { ...booking, ...updateData };\n    this.bookings.set(id, updatedBooking);\n    return updatedBooking;\n  }\n\n  async deleteBooking(id: string): Promise<boolean> {\n    return this.bookings.delete(id);\n  }\n\n  // Exercise methods\n  async getExercises(): Promise<Exercise[]> {\n    return Array.from(this.exercises.values());\n  }\n\n  async getExercise(id: string): Promise<Exercise | undefined> {\n    return this.exercises.get(id);\n  }\n\n  async createExercise(insertExercise: InsertExercise): Promise<Exercise> {\n    const id = this.generateId();\n    const exercise: Exercise = {\n      id,\n      ...insertExercise,\n      createdAt: new Date(),\n    };\n    this.exercises.set(id, exercise);\n    return exercise;\n  }\n\n  async updateExercise(id: string, updateData: Partial<InsertExercise>): Promise<Exercise | undefined> {\n    const exercise = this.exercises.get(id);\n    if (!exercise) return undefined;\n    \n    const updatedExercise = { ...exercise, ...updateData };\n    this.exercises.set(id, updatedExercise);\n    return updatedExercise;\n  }\n\n  async deleteExercise(id: string): Promise<boolean> {\n    return this.exercises.delete(id);\n  }\n\n  // Announcement methods\n  async getAnnouncements(): Promise<Announcement[]> {\n    return Array.from(this.announcements.values()).sort((a, b) => \n      new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n    );\n  }\n\n  async createAnnouncement(insertAnnouncement: InsertAnnouncement): Promise<Announcement> {\n    const id = this.generateId();\n    const announcement: Announcement = {\n      id,\n      ...insertAnnouncement,\n      createdAt: new Date(),\n    };\n    this.announcements.set(id, announcement);\n    return announcement;\n  }\n\n  async deleteAnnouncement(id: string): Promise<boolean> {\n    return this.announcements.delete(id);\n  }\n}\n\nexport const storage = new InMemoryStorage();","size_bytes":10603},"server/types.ts":{"content":"import 'express-session';\n\ndeclare module 'express-session' {\n  interface SessionData {\n    userId: string;\n  }\n}\n","size_bytes":114},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { z } from \"zod\";\n\n// User types and schemas\nexport const insertUserSchema = z.object({\n  username: z.string().min(3),\n  password: z.string().min(6),\n  email: z.string().email(),\n  fullName: z.string().optional(),\n  role: z.enum([\"user\", \"admin\"]).default(\"user\"),\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport interface User extends InsertUser {\n  id: string;\n  createdAt: Date;\n}\n\n// Session types and schemas\nexport const insertSessionSchema = z.object({\n  title: z.string().min(1),\n  description: z.string().min(1),\n  instructor: z.string().min(1),\n  date: z.coerce.date(),\n  startTime: z.string(),\n  endTime: z.string(),\n  level: z.enum([\"beginner\", \"intermediate\", \"advanced\"]),\n  maxParticipants: z.number().int().positive(),\n  location: z.string().min(1),\n});\n\nexport const updateSessionSchema = insertSessionSchema.partial();\n\nexport type InsertSession = z.infer<typeof insertSessionSchema>;\n\nexport interface Session extends InsertSession {\n  id: string;\n  currentParticipants: number;\n  createdAt: Date;\n}\n\n// Booking types and schemas\nexport const insertBookingSchema = z.object({\n  userId: z.string(),\n  sessionId: z.string(),\n  status: z.enum([\"confirmed\", \"cancelled\", \"completed\"]).default(\"confirmed\"),\n});\n\nexport type InsertBooking = z.infer<typeof insertBookingSchema>;\n\nexport interface Booking extends InsertBooking {\n  id: string;\n  createdAt: Date;\n}\n\n// Exercise types and schemas\nexport const insertExerciseSchema = z.object({\n  name: z.string().min(1),\n  description: z.string().min(1),\n  category: z.enum([\"flexibility\", \"strength\", \"balance\", \"relaxation\"]),\n  difficulty: z.enum([\"beginner\", \"intermediate\", \"advanced\"]),\n  duration: z.number().int().positive(),\n  videoUrl: z.string().url().optional(),\n  imageUrl: z.string().url().optional(),\n});\n\nexport type InsertExercise = z.infer<typeof insertExerciseSchema>;\n\nexport interface Exercise extends InsertExercise {\n  id: string;\n  createdAt: Date;\n}\n\n// Announcement types and schemas\nexport const insertAnnouncementSchema = z.object({\n  title: z.string().min(1),\n  content: z.string().min(1),\n  authorId: z.string(),\n});\n\nexport type InsertAnnouncement = z.infer<typeof insertAnnouncementSchema>;\n\nexport interface Announcement extends InsertAnnouncement {\n  id: string;\n  createdAt: Date;\n}","size_bytes":2309},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { useEffect } from \"react\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { demoQueryClient } from \"./lib/demoQueryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/contexts/AuthContext\";\nimport { DemoAuthProvider } from \"@/contexts/DemoAuthContext\";\nimport { ProtectedRoute } from \"@/components/ProtectedRoute\";\nimport { AdminRoute } from \"@/components/AdminRoute\";\nimport Home from \"@/pages/Home\";\nimport Login from \"@/pages/Login\";\nimport Sessions from \"@/pages/Sessions\";\nimport Exercises from \"@/pages/Exercises\";\nimport UserDashboard from \"@/pages/UserDashboard\";\nimport AdminDashboard from \"@/pages/AdminDashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nconst IS_DEMO_MODE = true;\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/sessions\" component={Sessions} />\n      <Route path=\"/exercises\" component={Exercises} />\n      <Route path=\"/dashboard\">\n        <ProtectedRoute>\n          <UserDashboard />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/admin\">\n        <AdminRoute>\n          <AdminDashboard />\n        </AdminRoute>\n      </Route>\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  useEffect(() => {\n    document.documentElement.classList.add('dark');\n    localStorage.setItem('theme', 'dark');\n  }, []);\n\n  const client = IS_DEMO_MODE ? demoQueryClient : queryClient;\n  const Provider = IS_DEMO_MODE ? DemoAuthProvider : AuthProvider;\n\n  return (\n    <QueryClientProvider client={client}>\n      <TooltipProvider>\n        <Provider>\n          <Toaster />\n          <Router />\n        </Provider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1970},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 40 6% 98%;\n  --foreground: 210 15% 25%;\n  --border: 40 6% 88%;\n\n  --card: 40 6% 96%;\n  --card-foreground: 210 15% 25%;\n  --card-border: 40 6% 90%;\n\n  --sidebar: 40 6% 94%;\n  --sidebar-foreground: 210 15% 25%;\n  --sidebar-border: 40 6% 88%;\n  --sidebar-primary: 150 45% 45%;\n  --sidebar-primary-foreground: 150 45% 98%;\n  --sidebar-accent: 40 8% 88%;\n  --sidebar-accent-foreground: 210 15% 25%;\n  --sidebar-ring: 150 45% 45%;\n\n  --popover: 40 6% 92%;\n  --popover-foreground: 210 15% 25%;\n  --popover-border: 40 6% 86%;\n\n  --primary: 150 45% 45%;\n  --primary-foreground: 150 45% 98%;\n\n  --secondary: 40 6% 86%;\n  --secondary-foreground: 210 15% 25%;\n\n  --muted: 40 8% 90%;\n  --muted-foreground: 210 15% 45%;\n\n  --accent: 25 85% 60%;\n  --accent-foreground: 0 0% 100%;\n\n  --destructive: 0 72% 51%;\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 40 6% 75%;\n  --ring: 150 45% 45%;\n\n  --chart-1: 150 45% 45%;\n  --chart-2: 280 30% 60%;\n  --chart-3: 25 85% 60%;\n  --chart-4: 200 50% 50%;\n  --chart-5: 45 70% 55%;\n\n  --font-sans: Inter, system-ui, -apple-system, sans-serif;\n  --font-serif: Lora, Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(210 15% 25% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(210 15% 25% / 0.08);\n  --shadow-sm: 0px 2px 4px 0px hsl(210 15% 25% / 0.06), 0px 1px 2px -1px hsl(210 15% 25% / 0.06);\n  --shadow: 0px 4px 6px -1px hsl(210 15% 25% / 0.08), 0px 2px 4px -1px hsl(210 15% 25% / 0.06);\n  --shadow-md: 0px 6px 8px -1px hsl(210 15% 25% / 0.08), 0px 2px 4px -1px hsl(210 15% 25% / 0.06);\n  --shadow-lg: 0px 10px 15px -3px hsl(210 15% 25% / 0.10), 0px 4px 6px -2px hsl(210 15% 25% / 0.05);\n  --shadow-xl: 0px 20px 25px -5px hsl(210 15% 25% / 0.10), 0px 10px 10px -5px hsl(210 15% 25% / 0.04);\n  --shadow-2xl: 0px 25px 50px -12px hsl(210 15% 25% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 210 20% 10%;\n  --foreground: 210 15% 85%;\n  --border: 210 20% 20%;\n\n  --card: 210 20% 12%;\n  --card-foreground: 210 15% 85%;\n  --card-border: 210 20% 18%;\n\n  --sidebar: 210 20% 14%;\n  --sidebar-foreground: 210 15% 85%;\n  --sidebar-border: 210 20% 20%;\n  --sidebar-primary: 150 40% 55%;\n  --sidebar-primary-foreground: 150 40% 10%;\n  --sidebar-accent: 210 18% 22%;\n  --sidebar-accent-foreground: 210 15% 85%;\n  --sidebar-ring: 150 40% 55%;\n\n  --popover: 210 20% 16%;\n  --popover-foreground: 210 15% 85%;\n  --popover-border: 210 20% 22%;\n\n  --primary: 150 40% 55%;\n  --primary-foreground: 150 40% 10%;\n\n  --secondary: 210 20% 20%;\n  --secondary-foreground: 210 15% 85%;\n\n  --muted: 210 18% 18%;\n  --muted-foreground: 210 15% 65%;\n\n  --accent: 25 75% 65%;\n  --accent-foreground: 0 0% 100%;\n\n  --destructive: 0 62% 50%;\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 210 20% 35%;\n  --ring: 150 40% 55%;\n\n  --chart-1: 150 40% 65%;\n  --chart-2: 280 35% 70%;\n  --chart-3: 25 75% 65%;\n  --chart-4: 200 55% 60%;\n  --chart-5: 45 65% 60%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(210 20% 5% / 0.20);\n  --shadow-xs: 0px 1px 3px 0px hsl(210 20% 5% / 0.30);\n  --shadow-sm: 0px 2px 4px 0px hsl(210 20% 5% / 0.25), 0px 1px 2px -1px hsl(210 20% 5% / 0.25);\n  --shadow: 0px 4px 6px -1px hsl(210 20% 5% / 0.35), 0px 2px 4px -1px hsl(210 20% 5% / 0.25);\n  --shadow-md: 0px 6px 8px -1px hsl(210 20% 5% / 0.35), 0px 2px 4px -1px hsl(210 20% 5% / 0.25);\n  --shadow-lg: 0px 10px 15px -3px hsl(210 20% 5% / 0.40), 0px 4px 6px -2px hsl(210 20% 5% / 0.20);\n  --shadow-xl: 0px 20px 25px -5px hsl(210 20% 5% / 0.40), 0px 10px 10px -5px hsl(210 20% 5% / 0.15);\n  --shadow-2xl: 0px 25px 50px -12px hsl(210 20% 5% / 0.50);\n\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":10725},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AdminRoute.tsx":{"content":"import { useAuth } from '@/contexts/DemoAuthContext';\nimport { useLocation } from 'wouter';\nimport { useEffect } from 'react';\n\ninterface AdminRouteProps {\n  children: React.ReactNode;\n}\n\nexport function AdminRoute({ children }: AdminRouteProps) {\n  const { isAuthenticated, isAdmin } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!isAuthenticated) {\n      setLocation('/login');\n    } else if (!isAdmin) {\n      setLocation('/');\n    }\n  }, [isAuthenticated, isAdmin, setLocation]);\n\n  if (!isAuthenticated || !isAdmin) {\n    return null;\n  }\n\n  return <>{children}</>;\n}\n","size_bytes":610},"client/src/components/BookingModal.tsx":{"content":"import { useState } from 'react';\nimport { useMutation } from '@tanstack/react-query';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Progress } from '@/components/ui/progress';\nimport { Calendar, CreditCard, CheckCircle } from 'lucide-react';\n\ninterface BookingModalProps {\n  open: boolean;\n  onClose: () => void;\n  sessionId?: string;\n  sessionTitle?: string;\n  sessionPrice?: number;\n}\n\nexport function BookingModal({ open, onClose, sessionId, sessionTitle, sessionPrice }: BookingModalProps) {\n  const { toast } = useToast();\n  const [step, setStep] = useState(1);\n  const [formData, setFormData] = useState({\n    date: '',\n    name: '',\n    email: '',\n    phone: '',\n    cardNumber: '',\n    expiry: '',\n    cvv: '',\n  });\n\n  const handleNext = () => {\n    console.log('Step completed:', step, formData);\n    if (step < 3) setStep(step + 1);\n  };\n\n  const handleBack = () => {\n    if (step > 1) setStep(step - 1);\n  };\n\n  const createBookingMutation = useMutation({\n    mutationFn: async (data: { sessionId: string; sessionDate: string }) => {\n      const res = await apiRequest('POST', '/api/bookings', data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/bookings'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/sessions'] });\n      toast({ \n        title: 'Booking confirmed!', \n        description: 'Your session has been booked successfully.' \n      });\n      setStep(1);\n      setFormData({\n        date: '',\n        name: '',\n        email: '',\n        phone: '',\n        cardNumber: '',\n        expiry: '',\n        cvv: '',\n      });\n      onClose();\n    },\n    onError: () => {\n      toast({ \n        title: 'Booking failed', \n        description: 'Unable to complete booking. Please try again.',\n        variant: 'destructive'\n      });\n    },\n  });\n\n  const handleComplete = () => {\n    if (!sessionId || !formData.date) {\n      toast({ \n        title: 'Missing information', \n        description: 'Please select a date for your booking.',\n        variant: 'destructive'\n      });\n      return;\n    }\n\n    createBookingMutation.mutate({\n      sessionId,\n      sessionDate: formData.date,\n    });\n  };\n\n  const progressValue = (step / 3) * 100;\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\" data-testid=\"modal-booking\">\n        <DialogHeader>\n          <DialogTitle>Book Session</DialogTitle>\n          <Progress value={progressValue} className=\"mt-2\" />\n        </DialogHeader>\n\n        {step === 1 && (\n          <div className=\"space-y-4 py-4\">\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n              <Calendar className=\"h-4 w-4\" />\n              <span>Step 1: Select Date & Time</span>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"session\">Session</Label>\n              <Input\n                id=\"session\"\n                value={sessionTitle || ''}\n                disabled\n                data-testid=\"input-session\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"date\">Preferred Date</Label>\n              <Input\n                id=\"date\"\n                type=\"date\"\n                value={formData.date}\n                onChange={(e) => setFormData({ ...formData, date: e.target.value })}\n                data-testid=\"input-date\"\n              />\n            </div>\n          </div>\n        )}\n\n        {step === 2 && (\n          <div className=\"space-y-4 py-4\">\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n              <Calendar className=\"h-4 w-4\" />\n              <span>Step 2: Your Information</span>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"name\">Full Name</Label>\n              <Input\n                id=\"name\"\n                value={formData.name}\n                onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                placeholder=\"John Doe\"\n                data-testid=\"input-name\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={formData.email}\n                onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                placeholder=\"john@example.com\"\n                data-testid=\"input-email\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"phone\">Phone</Label>\n              <Input\n                id=\"phone\"\n                type=\"tel\"\n                value={formData.phone}\n                onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n                placeholder=\"+1 (555) 000-0000\"\n                data-testid=\"input-phone\"\n              />\n            </div>\n          </div>\n        )}\n\n        {step === 3 && (\n          <div className=\"space-y-4 py-4\">\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n              <CreditCard className=\"h-4 w-4\" />\n              <span>Step 3: Payment</span>\n            </div>\n            <div className=\"rounded-lg bg-muted p-4\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-muted-foreground\">Total Amount</span>\n                <span className=\"text-2xl font-semibold\">${sessionPrice || 0}</span>\n              </div>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"card\">Card Number</Label>\n              <Input\n                id=\"card\"\n                value={formData.cardNumber}\n                onChange={(e) => setFormData({ ...formData, cardNumber: e.target.value })}\n                placeholder=\"1234 5678 9012 3456\"\n                data-testid=\"input-card\"\n              />\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"expiry\">Expiry</Label>\n                <Input\n                  id=\"expiry\"\n                  value={formData.expiry}\n                  onChange={(e) => setFormData({ ...formData, expiry: e.target.value })}\n                  placeholder=\"MM/YY\"\n                  data-testid=\"input-expiry\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"cvv\">CVV</Label>\n                <Input\n                  id=\"cvv\"\n                  value={formData.cvv}\n                  onChange={(e) => setFormData({ ...formData, cvv: e.target.value })}\n                  placeholder=\"123\"\n                  data-testid=\"input-cvv\"\n                />\n              </div>\n            </div>\n          </div>\n        )}\n\n        <div className=\"flex items-center justify-between gap-2\">\n          {step > 1 && (\n            <Button variant=\"outline\" onClick={handleBack} data-testid=\"button-back\">\n              Back\n            </Button>\n          )}\n          <div className=\"flex-1\" />\n          {step < 3 ? (\n            <Button onClick={handleNext} data-testid=\"button-next\">\n              Continue\n            </Button>\n          ) : (\n            <Button \n              onClick={handleComplete} \n              disabled={createBookingMutation.isPending}\n              data-testid=\"button-complete\"\n            >\n              <CheckCircle className=\"mr-2 h-4 w-4\" />\n              {createBookingMutation.isPending ? 'Processing...' : 'Complete Booking'}\n            </Button>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8043},"client/src/components/ExerciseCard.tsx":{"content":"import { Card, CardContent, CardHeader } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Play, Clock } from 'lucide-react';\n\ninterface ExerciseCardProps {\n  id: string;\n  title: string;\n  description: string;\n  duration: number;\n  level: string;\n  category: string;\n  thumbnailUrl?: string;\n  onPlay?: (id: string) => void;\n}\n\nexport function ExerciseCard({\n  id,\n  title,\n  description,\n  duration,\n  level,\n  category,\n  thumbnailUrl,\n  onPlay,\n}: ExerciseCardProps) {\n  return (\n    <Card\n      className=\"group overflow-hidden hover-elevate cursor-pointer\"\n      onClick={() => onPlay?.(id)}\n      data-testid={`card-exercise-${id}`}\n    >\n      <div className=\"relative aspect-video overflow-hidden bg-muted\">\n        {thumbnailUrl && (\n          <img\n            src={thumbnailUrl}\n            alt={title}\n            className=\"h-full w-full object-cover transition-transform group-hover:scale-105\"\n          />\n        )}\n        <div className=\"absolute inset-0 flex items-center justify-center bg-black/20 opacity-0 transition-opacity group-hover:opacity-100\">\n          <div className=\"flex h-16 w-16 items-center justify-center rounded-full bg-primary text-primary-foreground\">\n            <Play className=\"h-8 w-8 fill-current\" />\n          </div>\n        </div>\n        <div className=\"absolute bottom-2 right-2 flex items-center gap-1 rounded-md bg-black/70 px-2 py-1 text-xs text-white\">\n          <Clock className=\"h-3 w-3\" />\n          <span>{duration} min</span>\n        </div>\n      </div>\n      <CardHeader className=\"p-4\">\n        <div className=\"flex items-start justify-between gap-2\">\n          <h3 className=\"font-semibold leading-tight\">{title}</h3>\n          <Badge variant=\"secondary\" className=\"shrink-0\">\n            {level}\n          </Badge>\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-4 pt-0\">\n        <p className=\"line-clamp-2 text-sm text-muted-foreground\">{description}</p>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2012},"client/src/components/Footer.tsx":{"content":"import { Mail, Phone, MapPin } from 'lucide-react';\n\nexport function Footer() {\n  return (\n    <footer className=\"border-t bg-muted/30 mt-auto\">\n      <div className=\"container mx-auto px-4 py-12\">\n        <div className=\"grid md:grid-cols-3 gap-8\">\n          <div>\n            <h3 className=\"font-semibold text-lg mb-4\">Contact Us</h3>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center gap-2 text-sm\">\n                <Phone className=\"h-4 w-4 text-muted-foreground\" />\n                <a href=\"tel:+15551234567\" className=\"hover:text-primary\">\n                  +1 (555) 123-4567\n                </a>\n              </div>\n              <div className=\"flex items-center gap-2 text-sm\">\n                <Mail className=\"h-4 w-4 text-muted-foreground\" />\n                <a href=\"mailto:info@sarvaswasthyam.com\" className=\"hover:text-primary\">\n                  info@sarvaswasthyam.com\n                </a>\n              </div>\n              <div className=\"flex items-center gap-2 text-sm\">\n                <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n                <span>123 Wellness Street, Peace City, PC 12345</span>\n              </div>\n            </div>\n          </div>\n\n          <div>\n            <h3 className=\"font-semibold text-lg mb-4\">Hours</h3>\n            <div className=\"space-y-2 text-sm text-muted-foreground\">\n              <p>Monday - Friday: 6:00 AM - 9:00 PM</p>\n              <p>Saturday - Sunday: 7:00 AM - 8:00 PM</p>\n            </div>\n          </div>\n\n          <div>\n            <h3 className=\"font-semibold text-lg mb-4\">About</h3>\n            <p className=\"text-sm text-muted-foreground font-serif\">\n              Sarvaswasthyam Yoga & Fitness is dedicated to transforming lives through the ancient practice of yoga and modern fitness techniques.\n            </p>\n          </div>\n        </div>\n\n        <div className=\"mt-8 pt-8 border-t text-center text-sm text-muted-foreground\">\n          <p>&copy; {new Date().getFullYear()} Sarvaswasthyam Yoga & Fitness. All rights reserved.</p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":2118},"client/src/components/Navbar.tsx":{"content":"import { Link, useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Sheet, SheetContent, SheetTrigger } from '@/components/ui/sheet';\nimport { useAuth } from '@/contexts/DemoAuthContext';\nimport { LogOut, User, Menu, X } from 'lucide-react';\nimport { useState } from 'react';\n\nexport function Navbar() {\n  const [location] = useLocation();\n  const { user, logout, isAdmin } = useAuth();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n\n  const navLinks = user\n    ? [\n        { href: '/', label: 'Home' },\n        { href: '/sessions', label: 'Sessions' },\n        { href: '/exercises', label: 'Exercises' },\n        ...(isAdmin\n          ? [{ href: '/admin', label: 'Admin Dashboard' }]\n          : [{ href: '/dashboard', label: 'My Dashboard' }]),\n      ]\n    : [\n        { href: '/', label: 'Home' },\n        { href: '/sessions', label: 'Sessions' },\n        { href: '/exercises', label: 'Exercises' },\n      ];\n\n  return (\n    <nav className=\"sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"flex h-16 items-center justify-between gap-4\">\n          <Link href=\"/\">\n            <a className=\"flex items-center gap-2\" data-testid=\"link-home\">\n              <div className=\"flex h-9 w-9 items-center justify-center rounded-lg bg-primary text-primary-foreground\">\n                <span className=\"text-lg font-semibold\">S</span>\n              </div>\n              <span className=\"hidden text-lg font-semibold sm:inline-block\">\n                Sarvaswasthyam\n              </span>\n            </a>\n          </Link>\n\n          <div className=\"hidden md:flex items-center gap-1\">\n            {navLinks.map((link) => (\n              <Link key={link.href} href={link.href}>\n                <a>\n                  <Button\n                    variant={location === link.href ? 'secondary' : 'ghost'}\n                    size=\"sm\"\n                    data-testid={`link-${link.label.toLowerCase().replace(' ', '-')}`}\n                  >\n                    {link.label}\n                  </Button>\n                </a>\n              </Link>\n            ))}\n          </div>\n\n          <div className=\"hidden md:flex items-center gap-2\">\n            {user ? (\n              <div className=\"flex items-center gap-2\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"gap-2\"\n                  data-testid=\"button-profile\"\n                >\n                  <User className=\"h-4 w-4\" />\n                  <span className=\"hidden sm:inline\">{user.fullName || user.username}</span>\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={logout}\n                  data-testid=\"button-logout\"\n                >\n                  <LogOut className=\"h-5 w-5\" />\n                </Button>\n              </div>\n            ) : (\n              <Link href=\"/login\">\n                <a>\n                  <Button size=\"sm\" data-testid=\"button-login\">\n                    Login\n                  </Button>\n                </a>\n              </Link>\n            )}\n          </div>\n\n          <Sheet open={mobileMenuOpen} onOpenChange={setMobileMenuOpen}>\n            <SheetTrigger asChild className=\"md:hidden\">\n              <Button variant=\"ghost\" size=\"icon\">\n                <Menu className=\"h-6 w-6\" />\n              </Button>\n            </SheetTrigger>\n            <SheetContent side=\"right\" className=\"w-[280px] sm:w-[350px]\">\n              <div className=\"flex flex-col gap-4 mt-8\">\n                <div className=\"flex flex-col gap-2\">\n                  {navLinks.map((link) => (\n                    <Link key={link.href} href={link.href}>\n                      <a onClick={() => setMobileMenuOpen(false)}>\n                        <Button\n                          variant={location === link.href ? 'secondary' : 'ghost'}\n                          className=\"w-full justify-start\"\n                          size=\"lg\"\n                        >\n                          {link.label}\n                        </Button>\n                      </a>\n                    </Link>\n                  ))}\n                </div>\n                \n                <div className=\"border-t pt-4\">\n                  {user ? (\n                    <div className=\"flex flex-col gap-2\">\n                      <div className=\"flex items-center gap-2 px-3 py-2\">\n                        <User className=\"h-5 w-5\" />\n                        <span className=\"font-medium\">{user.fullName || user.username}</span>\n                      </div>\n                      <Button\n                        variant=\"ghost\"\n                        className=\"w-full justify-start gap-2\"\n                        size=\"lg\"\n                        onClick={() => {\n                          logout();\n                          setMobileMenuOpen(false);\n                        }}\n                      >\n                        <LogOut className=\"h-5 w-5\" />\n                        Logout\n                      </Button>\n                    </div>\n                  ) : (\n                    <Link href=\"/login\">\n                      <a onClick={() => setMobileMenuOpen(false)}>\n                        <Button className=\"w-full\" size=\"lg\">\n                          Login\n                        </Button>\n                      </a>\n                    </Link>\n                  )}\n                </div>\n              </div>\n            </SheetContent>\n          </Sheet>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":5703},"client/src/components/ProtectedRoute.tsx":{"content":"import { useAuth } from '@/contexts/DemoAuthContext';\nimport { useLocation } from 'wouter';\nimport { useEffect } from 'react';\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n}\n\nexport function ProtectedRoute({ children }: ProtectedRouteProps) {\n  const { isAuthenticated } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!isAuthenticated) {\n      setLocation('/login');\n    }\n  }, [isAuthenticated, setLocation]);\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  return <>{children}</>;\n}\n","size_bytes":541},"client/src/components/SessionCard.tsx":{"content":"import { Card, CardContent, CardFooter, CardHeader } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Clock, Users, Calendar } from 'lucide-react';\n\ninterface SessionCardProps {\n  id: string;\n  title: string;\n  instructor: string;\n  category: string;\n  level: string;\n  duration: number;\n  price: number;\n  schedule: string;\n  currentParticipants: number;\n  maxParticipants: number;\n  imageUrl?: string;\n  onBook?: (id: string) => void;\n}\n\nexport function SessionCard({\n  id,\n  title,\n  instructor,\n  category,\n  level,\n  duration,\n  price,\n  schedule,\n  currentParticipants,\n  maxParticipants,\n  imageUrl,\n  onBook,\n}: SessionCardProps) {\n  const isAvailable = currentParticipants < maxParticipants;\n  const availableSpots = maxParticipants - currentParticipants;\n\n  return (\n    <Card className=\"overflow-hidden hover-elevate\" data-testid={`card-session-${id}`}>\n      {imageUrl && (\n        <div className=\"aspect-[4/3] overflow-hidden\">\n          <img\n            src={imageUrl}\n            alt={title}\n            className=\"h-full w-full object-cover transition-transform hover:scale-105\"\n          />\n        </div>\n      )}\n      <CardHeader className=\"space-y-2 p-6\">\n        <div className=\"flex items-start justify-between gap-2\">\n          <h3 className=\"font-semibold text-lg leading-tight\">{title}</h3>\n          <Badge variant={level === 'Beginner' ? 'secondary' : level === 'Intermediate' ? 'default' : 'outline'}>\n            {level}\n          </Badge>\n        </div>\n        <p className=\"text-sm text-muted-foreground\">{instructor}</p>\n      </CardHeader>\n      <CardContent className=\"space-y-3 p-6 pt-0\">\n        <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n          <div className=\"flex items-center gap-1\">\n            <Clock className=\"h-4 w-4\" />\n            <span>{duration} min</span>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <Calendar className=\"h-4 w-4\" />\n            <span>{schedule}</span>\n          </div>\n        </div>\n        <div className=\"flex items-center gap-1 text-sm\">\n          <Users className=\"h-4 w-4 text-muted-foreground\" />\n          <span className=\"text-muted-foreground\">\n            {isAvailable ? (\n              <>\n                <span className=\"font-medium text-foreground\">{availableSpots}</span> spots left\n              </>\n            ) : (\n              <span className=\"text-destructive\">Fully booked</span>\n            )}\n          </span>\n        </div>\n      </CardContent>\n      <CardFooter className=\"flex items-center justify-between gap-2 p-6 pt-0\">\n        <div className=\"text-2xl font-semibold\">${price}</div>\n        <Button\n          disabled={!isAvailable}\n          onClick={() => onBook?.(id)}\n          data-testid={`button-book-${id}`}\n        >\n          {isAvailable ? 'Book Now' : 'Full'}\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}\n","size_bytes":2984},"client/src/components/StatCard.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { LucideIcon } from 'lucide-react';\n\ninterface StatCardProps {\n  title: string;\n  value: string | number;\n  icon: LucideIcon;\n  description?: string;\n}\n\nexport function StatCard({ title, value, icon: Icon, description }: StatCardProps) {\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium\">{title}</CardTitle>\n        <Icon className=\"h-4 w-4 text-muted-foreground\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold\">{value}</div>\n        {description && (\n          <p className=\"text-xs text-muted-foreground mt-1\">{description}</p>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":826},"client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { useEffect, useState } from 'react';\n\nexport function ThemeToggle() {\n  const [theme, setTheme] = useState<'light' | 'dark'>('light');\n\n  useEffect(() => {\n    const stored = localStorage.getItem('theme') as 'light' | 'dark' | null;\n    const initial = stored || 'light';\n    setTheme(initial);\n    document.documentElement.classList.toggle('dark', initial === 'dark');\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    setTheme(newTheme);\n    localStorage.setItem('theme', newTheme);\n    document.documentElement.classList.toggle('dark', newTheme === 'dark');\n  };\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n    >\n      {theme === 'light' ? (\n        <Moon className=\"h-5 w-5\" />\n      ) : (\n        <Sun className=\"h-5 w-5\" />\n      )}\n    </Button>\n  );\n}\n","size_bytes":1001},"client/src/components/VideoModal.tsx":{"content":"import {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\n\ninterface VideoModalProps {\n  open: boolean;\n  onClose: () => void;\n  videoUrl?: string;\n  title?: string;\n}\n\nexport function VideoModal({ open, onClose, videoUrl, title }: VideoModalProps) {\n  const getYouTubeEmbedUrl = (url: string) => {\n    const videoId = url.split('v=')[1]?.split('&')[0] || url.split('/').pop();\n    return `https://www.youtube.com/embed/${videoId}`;\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl p-0\" data-testid=\"modal-video\">\n        {title && (\n          <DialogHeader className=\"px-6 pt-6\">\n            <DialogTitle>{title}</DialogTitle>\n          </DialogHeader>\n        )}\n        <div className=\"aspect-video w-full\">\n          {videoUrl && (\n            <iframe\n              src={getYouTubeEmbedUrl(videoUrl)}\n              title={title || 'Video player'}\n              className=\"h-full w-full\"\n              allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n              allowFullScreen\n            />\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":1219},"client/src/contexts/AuthContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n\ninterface User {\n  id: string;\n  username: string;\n  email: string;\n  role: 'user' | 'admin';\n  fullName?: string | null;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  login: (username: string, password: string) => Promise<boolean>;\n  register: (username: string, password: string, email: string, fullName: string) => Promise<{ success: boolean; error?: string }>;\n  logout: () => Promise<void>;\n  isAuthenticated: boolean;\n  isAdmin: boolean;\n  loading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        const response = await fetch('/api/auth/me', {\n          credentials: 'include',\n        });\n        \n        if (response.ok) {\n          const userData = await response.json();\n          setUser(userData);\n        }\n      } catch (error) {\n        console.error('Auth check failed:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkAuth();\n  }, []);\n\n  const login = async (username: string, password: string) => {\n    try {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify({ username, password }),\n      });\n\n      if (response.ok) {\n        const userData = await response.json();\n        setUser(userData);\n        return true;\n      }\n      \n      return false;\n    } catch (error) {\n      console.error('Login failed:', error);\n      return false;\n    }\n  };\n\n  const register = async (username: string, password: string, email: string, fullName: string) => {\n    try {\n      const response = await fetch('/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify({ username, password, email, fullName, role: 'user' }),\n      });\n\n      if (response.ok) {\n        const userData = await response.json();\n        setUser(userData);\n        return { success: true };\n      }\n      \n      const errorData = await response.json();\n      return { success: false, error: errorData.error || 'Registration failed' };\n    } catch (error) {\n      console.error('Registration failed:', error);\n      return { success: false, error: 'Registration failed' };\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await fetch('/api/auth/logout', {\n        method: 'POST',\n        credentials: 'include',\n      });\n      setUser(null);\n    } catch (error) {\n      console.error('Logout failed:', error);\n    }\n  };\n\n  const value = {\n    user,\n    login,\n    register,\n    logout,\n    isAuthenticated: !!user,\n    isAdmin: user?.role === 'admin',\n    loading,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n","size_bytes":3349},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/mockData.ts":{"content":"export const mockSessions = [\n  {\n    id: \"1\",\n    title: \"Morning Hatha Yoga\",\n    description: \"Start your day with gentle Hatha yoga focusing on breath and basic postures.\",\n    instructor: \"Priya Sharma\",\n    category: \"Hatha\",\n    level: \"beginner\",\n    duration: 60,\n    maxParticipants: 20,\n    currentParticipants: 15,\n    price: 500,\n    schedule: \"Mon, Wed, Fri - 7:00 AM\",\n    imageUrl: \"/attached_assets/generated_images/Indoor_yoga_studio_session_520d01bc.png\",\n    createdAt: new Date(\"2024-01-15\")\n  },\n  {\n    id: \"2\",\n    title: \"Power Vinyasa Flow\",\n    description: \"Dynamic flow combining strength, flexibility, and mindfulness.\",\n    instructor: \"Raj Kumar\",\n    category: \"Vinyasa\",\n    level: \"intermediate\",\n    duration: 75,\n    maxParticipants: 15,\n    currentParticipants: 12,\n    price: 700,\n    schedule: \"Tue, Thu - 6:00 PM\",\n    imageUrl: \"/attached_assets/generated_images/Power_yoga_session_0ab6d541.png\",\n    createdAt: new Date(\"2024-01-16\")\n  },\n  {\n    id: \"3\",\n    title: \"Restorative Evening Yoga\",\n    description: \"Gentle, relaxing practice to unwind and restore balance.\",\n    instructor: \"Anjali Patel\",\n    category: \"Restorative\",\n    level: \"beginner\",\n    duration: 60,\n    maxParticipants: 25,\n    currentParticipants: 20,\n    price: 450,\n    schedule: \"Mon, Wed, Fri - 7:00 PM\",\n    imageUrl: \"/attached_assets/generated_images/Meditation_session_image_9674324d.png\",\n    createdAt: new Date(\"2024-01-17\")\n  },\n  {\n    id: \"4\",\n    title: \"Advanced Ashtanga\",\n    description: \"Traditional Ashtanga series for experienced practitioners.\",\n    instructor: \"Vikram Singh\",\n    category: \"Ashtanga\",\n    level: \"advanced\",\n    duration: 90,\n    maxParticipants: 10,\n    currentParticipants: 8,\n    price: 900,\n    schedule: \"Tue, Thu, Sat - 6:00 AM\",\n    imageUrl: \"/attached_assets/generated_images/Indoor_yoga_studio_session_520d01bc.png\",\n    createdAt: new Date(\"2024-01-18\")\n  },\n  {\n    id: \"5\",\n    title: \"Yin Yoga & Meditation\",\n    description: \"Deep stretching combined with meditation for inner peace.\",\n    instructor: \"Meera Reddy\",\n    category: \"Yin\",\n    level: \"beginner\",\n    duration: 75,\n    maxParticipants: 20,\n    currentParticipants: 18,\n    price: 550,\n    schedule: \"Wed, Sun - 8:00 AM\",\n    imageUrl: \"/attached_assets/generated_images/Meditation_session_image_9674324d.png\",\n    createdAt: new Date(\"2024-01-19\")\n  },\n  {\n    id: \"6\",\n    title: \"Prenatal Yoga\",\n    description: \"Safe and nurturing practice designed for expecting mothers.\",\n    instructor: \"Priya Sharma\",\n    category: \"Prenatal\",\n    level: \"beginner\",\n    duration: 60,\n    maxParticipants: 12,\n    currentParticipants: 10,\n    price: 600,\n    schedule: \"Mon, Thu - 10:00 AM\",\n    imageUrl: \"/attached_assets/generated_images/Indoor_yoga_studio_session_520d01bc.png\",\n    createdAt: new Date(\"2024-01-20\")\n  }\n];\n\nexport const mockExercises = [\n  {\n    id: \"1\",\n    title: \"Sun Salutation A\",\n    description: \"Classic sequence to warm up the body and build energy.\",\n    videoUrl: \"https://www.youtube.com/embed/73S6EUR0X88\",\n    duration: 10,\n    level: \"beginner\",\n    category: \"Vinyasa\",\n    thumbnailUrl: \"/attached_assets/generated_images/Power_yoga_session_0ab6d541.png\",\n    createdAt: new Date(\"2024-01-10\")\n  },\n  {\n    id: \"2\",\n    title: \"Warrior Sequence\",\n    description: \"Build strength and stability with warrior poses.\",\n    videoUrl: \"https://www.youtube.com/embed/Ej4FNw1CWho\",\n    duration: 15,\n    level: \"intermediate\",\n    category: \"Hatha\",\n    thumbnailUrl: \"/attached_assets/generated_images/Power_yoga_session_0ab6d541.png\",\n    createdAt: new Date(\"2024-01-11\")\n  },\n  {\n    id: \"3\",\n    title: \"Deep Relaxation Practice\",\n    description: \"Guided relaxation and breathing exercises for stress relief.\",\n    videoUrl: \"https://www.youtube.com/embed/1ZJARUlwC2o\",\n    duration: 20,\n    level: \"beginner\",\n    category: \"Restorative\",\n    thumbnailUrl: \"/attached_assets/generated_images/Meditation_session_image_9674324d.png\",\n    createdAt: new Date(\"2024-01-12\")\n  },\n  {\n    id: \"4\",\n    title: \"Core Strengthening Flow\",\n    description: \"Targeted practice to build core strength and stability.\",\n    videoUrl: \"https://www.youtube.com/embed/wz1rXCDUZlg\",\n    duration: 25,\n    level: \"intermediate\",\n    category: \"Vinyasa\",\n    thumbnailUrl: \"/attached_assets/generated_images/Power_yoga_session_0ab6d541.png\",\n    createdAt: new Date(\"2024-01-13\")\n  },\n  {\n    id: \"5\",\n    title: \"Hip Opening Sequence\",\n    description: \"Gentle stretches to release tension in hips and lower back.\",\n    videoUrl: \"https://www.youtube.com/embed/nAjSKQP7e6w\",\n    duration: 20,\n    level: \"beginner\",\n    category: \"Yin\",\n    thumbnailUrl: \"/attached_assets/generated_images/Meditation_session_image_9674324d.png\",\n    createdAt: new Date(\"2024-01-14\")\n  },\n  {\n    id: \"6\",\n    title: \"Advanced Arm Balances\",\n    description: \"Challenge yourself with crow, side crow, and flying pigeon.\",\n    videoUrl: \"https://www.youtube.com/embed/kHl2x7eR7FY\",\n    duration: 30,\n    level: \"advanced\",\n    category: \"Ashtanga\",\n    thumbnailUrl: \"/attached_assets/generated_images/Power_yoga_session_0ab6d541.png\",\n    createdAt: new Date(\"2024-01-15\")\n  },\n  {\n    id: \"7\",\n    title: \"Pranayama Basics\",\n    description: \"Learn essential breathing techniques for better health.\",\n    videoUrl: \"https://www.youtube.com/embed/nM-ySWyID9o\",\n    duration: 15,\n    level: \"beginner\",\n    category: \"Pranayama\",\n    thumbnailUrl: \"/attached_assets/generated_images/Meditation_session_image_9674324d.png\",\n    createdAt: new Date(\"2024-01-16\")\n  },\n  {\n    id: \"8\",\n    title: \"Backbend Journey\",\n    description: \"Safely progress through backbends from beginner to advanced.\",\n    videoUrl: \"https://www.youtube.com/embed/nAOueWTAHkI\",\n    duration: 20,\n    level: \"intermediate\",\n    category: \"Hatha\",\n    thumbnailUrl: \"/attached_assets/generated_images/Indoor_yoga_studio_session_520d01bc.png\",\n    createdAt: new Date(\"2024-01-17\")\n  }\n];\n\nexport const mockUser = {\n  id: \"user-1\",\n  username: \"demo\",\n  email: \"demo@example.com\",\n  fullName: \"Demo User\",\n  role: \"user\" as const\n};\n\nexport const mockAdmin = {\n  id: \"admin-1\",\n  username: \"admin\",\n  email: \"admin@example.com\",\n  fullName: \"Admin User\",\n  role: \"admin\" as const\n};\n\nexport const mockBookings = [\n  {\n    id: \"1\",\n    userId: \"user-1\",\n    sessionId: \"1\",\n    sessionDate: new Date(\"2024-02-15\"),\n    status: \"confirmed\" as const,\n    createdAt: new Date(\"2024-01-25\"),\n    session: mockSessions[0]\n  },\n  {\n    id: \"2\",\n    userId: \"user-1\",\n    sessionId: \"3\",\n    sessionDate: new Date(\"2024-02-16\"),\n    status: \"confirmed\" as const,\n    createdAt: new Date(\"2024-01-26\"),\n    session: mockSessions[2]\n  },\n  {\n    id: \"3\",\n    userId: \"user-1\",\n    sessionId: \"5\",\n    sessionDate: new Date(\"2024-02-18\"),\n    status: \"confirmed\" as const,\n    createdAt: new Date(\"2024-01-27\"),\n    session: mockSessions[4]\n  }\n];\n\nexport const mockAnnouncements = [\n  {\n    id: \"1\",\n    title: \"Welcome to Sarvaswasthyam!\",\n    content: \"We're excited to have you join our yoga community. Check out our new session schedule!\",\n    authorId: \"admin-1\",\n    createdAt: new Date(\"2024-01-20\")\n  },\n  {\n    id: \"2\",\n    title: \"New Advanced Classes Available\",\n    content: \"We've added new advanced Ashtanga classes for experienced practitioners. Register now!\",\n    authorId: \"admin-1\",\n    createdAt: new Date(\"2024-01-22\")\n  }\n];\n","size_bytes":7445},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/AdminDashboard.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { Navbar } from '@/components/Navbar';\nimport { Footer } from '@/components/Footer';\nimport { StatCard } from '@/components/StatCard';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Calendar, DollarSign, Users, Activity, Plus, Edit, Trash } from 'lucide-react';\nimport type { Session, Booking, User as UserType } from '@shared/schema';\n\nexport default function AdminDashboard() {\n  const { toast } = useToast();\n  const [sessionDialog, setSessionDialog] = useState(false);\n  const [announcementDialog, setAnnouncementDialog] = useState(false);\n  const [sessionForm, setSessionForm] = useState({\n    title: '',\n    description: '',\n    instructor: '',\n    category: 'Hatha',\n    level: 'Beginner',\n    duration: 60,\n    maxParticipants: 15,\n    price: 25,\n    schedule: '',\n  });\n  const [announcementForm, setAnnouncementForm] = useState({\n    title: '',\n    content: '',\n  });\n\n  const { data: sessions = [] } = useQuery<Session[]>({\n    queryKey: ['/api/sessions'],\n  });\n\n  const { data: bookings = [] } = useQuery<Booking[]>({\n    queryKey: ['/api/bookings'],\n  });\n\n  const createSessionMutation = useMutation({\n    mutationFn: async (data: typeof sessionForm) => {\n      const res = await apiRequest('POST', '/api/sessions', data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/sessions'] });\n      toast({ title: 'Session created successfully' });\n      setSessionDialog(false);\n      setSessionForm({\n        title: '',\n        description: '',\n        instructor: '',\n        category: 'Hatha',\n        level: 'Beginner',\n        duration: 60,\n        maxParticipants: 15,\n        price: 25,\n        schedule: '',\n      });\n    },\n    onError: () => {\n      toast({ \n        title: 'Failed to create session', \n        description: 'Please try again.',\n        variant: 'destructive'\n      });\n    },\n  });\n\n  const deleteSessionMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const res = await apiRequest('DELETE', `/api/sessions/${id}`);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/sessions'] });\n      toast({ title: 'Session deleted successfully' });\n    },\n    onError: () => {\n      toast({ \n        title: 'Failed to delete session',\n        variant: 'destructive'\n      });\n    },\n  });\n\n  const createAnnouncementMutation = useMutation({\n    mutationFn: async (data: typeof announcementForm) => {\n      const res = await apiRequest('POST', '/api/announcements', data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/announcements'] });\n      toast({ title: 'Announcement published successfully' });\n      setAnnouncementDialog(false);\n      setAnnouncementForm({ title: '', content: '' });\n    },\n    onError: () => {\n      toast({ \n        title: 'Failed to publish announcement',\n        variant: 'destructive'\n      });\n    },\n  });\n\n  const totalRevenue = bookings.reduce((sum, booking) => {\n    const session = sessions.find(s => s.id === booking.sessionId);\n    return sum + (session?.price || 0);\n  }, 0);\n\n  const handleCreateSession = () => {\n    createSessionMutation.mutate(sessionForm);\n  };\n\n  const handleDeleteSession = (id: string) => {\n    if (confirm('Are you sure you want to delete this session?')) {\n      deleteSessionMutation.mutate(id);\n    }\n  };\n\n  const handlePublishAnnouncement = () => {\n    createAnnouncementMutation.mutate(announcementForm);\n  };\n\n  return (\n    <div className=\"min-h-screen\">\n      <Navbar />\n      \n      <div className=\"container mx-auto px-4 py-12\">\n        <div className=\"mb-8 flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-4xl font-bold mb-2\">Admin Dashboard</h1>\n            <p className=\"text-muted-foreground font-serif\">Manage sessions, bookings, and users</p>\n          </div>\n          <div className=\"flex gap-2\">\n            <Dialog open={sessionDialog} onOpenChange={setSessionDialog}>\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-create-session\">\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  New Session\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Create New Session</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4 py-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"title\">Session Title</Label>\n                    <Input \n                      id=\"title\" \n                      value={sessionForm.title}\n                      onChange={(e) => setSessionForm({ ...sessionForm, title: e.target.value })}\n                      placeholder=\"e.g., Morning Hatha Yoga\" \n                      data-testid=\"input-session-title\" \n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"description\">Description</Label>\n                    <Textarea \n                      id=\"description\" \n                      value={sessionForm.description}\n                      onChange={(e) => setSessionForm({ ...sessionForm, description: e.target.value })}\n                      placeholder=\"Session description\" \n                      rows={2}\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"instructor\">Instructor</Label>\n                    <Input \n                      id=\"instructor\" \n                      value={sessionForm.instructor}\n                      onChange={(e) => setSessionForm({ ...sessionForm, instructor: e.target.value })}\n                      placeholder=\"Instructor name\" \n                      data-testid=\"input-instructor\" \n                    />\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"category\">Category</Label>\n                      <Select value={sessionForm.category} onValueChange={(value) => setSessionForm({ ...sessionForm, category: value })}>\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"Hatha\">Hatha</SelectItem>\n                          <SelectItem value=\"Vinyasa\">Vinyasa</SelectItem>\n                          <SelectItem value=\"Meditation\">Meditation</SelectItem>\n                          <SelectItem value=\"Restorative\">Restorative</SelectItem>\n                          <SelectItem value=\"Ashtanga\">Ashtanga</SelectItem>\n                          <SelectItem value=\"Yin\">Yin</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"level\">Level</Label>\n                      <Select value={sessionForm.level} onValueChange={(value) => setSessionForm({ ...sessionForm, level: value })}>\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"Beginner\">Beginner</SelectItem>\n                          <SelectItem value=\"Intermediate\">Intermediate</SelectItem>\n                          <SelectItem value=\"Advanced\">Advanced</SelectItem>\n                          <SelectItem value=\"All Levels\">All Levels</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"duration\">Duration (min)</Label>\n                      <Input \n                        id=\"duration\" \n                        type=\"number\" \n                        value={sessionForm.duration}\n                        onChange={(e) => setSessionForm({ ...sessionForm, duration: parseInt(e.target.value) || 60 })}\n                        placeholder=\"60\" \n                        data-testid=\"input-duration\" \n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"price\">Price ($)</Label>\n                      <Input \n                        id=\"price\" \n                        type=\"number\" \n                        value={sessionForm.price}\n                        onChange={(e) => setSessionForm({ ...sessionForm, price: parseInt(e.target.value) || 25 })}\n                        placeholder=\"25\" \n                        data-testid=\"input-price\" \n                      />\n                    </div>\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"maxParticipants\">Max Participants</Label>\n                      <Input \n                        id=\"maxParticipants\" \n                        type=\"number\" \n                        value={sessionForm.maxParticipants}\n                        onChange={(e) => setSessionForm({ ...sessionForm, maxParticipants: parseInt(e.target.value) || 15 })}\n                        placeholder=\"15\" \n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"schedule\">Schedule</Label>\n                      <Input \n                        id=\"schedule\" \n                        value={sessionForm.schedule}\n                        onChange={(e) => setSessionForm({ ...sessionForm, schedule: e.target.value })}\n                        placeholder=\"Mon, Wed 7AM\" \n                      />\n                    </div>\n                  </div>\n                  <Button \n                    className=\"w-full\" \n                    onClick={handleCreateSession}\n                    disabled={createSessionMutation.isPending}\n                    data-testid=\"button-save-session\"\n                  >\n                    {createSessionMutation.isPending ? 'Creating...' : 'Create Session'}\n                  </Button>\n                </div>\n              </DialogContent>\n            </Dialog>\n\n            <Dialog open={announcementDialog} onOpenChange={setAnnouncementDialog}>\n              <DialogTrigger asChild>\n                <Button variant=\"outline\" data-testid=\"button-post-announcement\">\n                  <Activity className=\"mr-2 h-4 w-4\" />\n                  Post Announcement\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Post Announcement</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4 py-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"announcement-title\">Title</Label>\n                    <Input \n                      id=\"announcement-title\" \n                      value={announcementForm.title}\n                      onChange={(e) => setAnnouncementForm({ ...announcementForm, title: e.target.value })}\n                      placeholder=\"Announcement title\" \n                      data-testid=\"input-announcement-title\" \n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"announcement-content\">Content</Label>\n                    <Textarea \n                      id=\"announcement-content\" \n                      value={announcementForm.content}\n                      onChange={(e) => setAnnouncementForm({ ...announcementForm, content: e.target.value })}\n                      placeholder=\"Announcement content\" \n                      rows={4} \n                      data-testid=\"input-announcement-content\" \n                    />\n                  </div>\n                  <Button \n                    className=\"w-full\" \n                    onClick={handlePublishAnnouncement}\n                    disabled={createAnnouncementMutation.isPending}\n                    data-testid=\"button-publish-announcement\"\n                  >\n                    {createAnnouncementMutation.isPending ? 'Publishing...' : 'Publish'}\n                  </Button>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <StatCard title=\"Total Bookings\" value={bookings.length} icon={Calendar} />\n          <StatCard title=\"Revenue\" value={`$${totalRevenue}`} icon={DollarSign} />\n          <StatCard title=\"Total Sessions\" value={sessions.length} icon={Activity} />\n          <StatCard title=\"Avg. Participants\" value={sessions.length > 0 ? Math.round(sessions.reduce((sum, s) => sum + s.currentParticipants, 0) / sessions.length) : 0} icon={Users} />\n        </div>\n\n        <div className=\"grid lg:grid-cols-2 gap-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Recent Bookings</CardTitle>\n              <CardDescription>Latest session bookings from users</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {bookings.length === 0 ? (\n                  <p className=\"text-sm text-muted-foreground\">No bookings yet</p>\n                ) : (\n                  bookings.slice(0, 5).map((booking) => {\n                    const session = sessions.find(s => s.id === booking.sessionId);\n                    return (\n                      <div key={booking.id} className=\"flex items-center justify-between pb-4 border-b last:border-0 last:pb-0\">\n                        <div>\n                          <p className=\"font-medium\">User #{booking.userId.slice(0, 8)}</p>\n                          <p className=\"text-sm text-muted-foreground\">{session?.title || 'Unknown Session'}</p>\n                          <p className=\"text-xs text-muted-foreground\">{booking.sessionDate}</p>\n                        </div>\n                        <div className=\"font-semibold\">${session?.price || 0}</div>\n                      </div>\n                    );\n                  })\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Session Management</CardTitle>\n              <CardDescription>Manage your yoga sessions</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {sessions.length === 0 ? (\n                  <p className=\"text-sm text-muted-foreground\">No sessions yet. Create one to get started!</p>\n                ) : (\n                  sessions.map((session) => (\n                    <div key={session.id} className=\"flex items-center justify-between p-3 rounded-lg border\">\n                      <div className=\"flex-1\">\n                        <p className=\"font-medium\">{session.title}</p>\n                        <p className=\"text-sm text-muted-foreground\">{session.instructor}</p>\n                        <p className=\"text-xs text-muted-foreground mt-1\">Participants: {session.currentParticipants}/{session.maxParticipants}</p>\n                      </div>\n                      <div className=\"flex gap-1\">\n                        <Button \n                          variant=\"ghost\" \n                          size=\"icon\" \n                          onClick={() => handleDeleteSession(session.id)}\n                          disabled={deleteSessionMutation.isPending}\n                          data-testid={`button-delete-${session.id}`}\n                        >\n                          <Trash className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":16892},"client/src/pages/Exercises.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Navbar } from '@/components/Navbar';\nimport { Footer } from '@/components/Footer';\nimport { ExerciseCard } from '@/components/ExerciseCard';\nimport { VideoModal } from '@/components/VideoModal';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Input } from '@/components/ui/input';\nimport { Search } from 'lucide-react';\nimport type { Exercise } from '@shared/schema';\nimport meditationImage from '@assets/generated_images/Meditation_session_image_9674324d.png';\nimport powerYogaImage from '@assets/generated_images/Power_yoga_session_0ab6d541.png';\nimport indoorImage from '@assets/generated_images/Indoor_yoga_studio_session_520d01bc.png';\n\nconst thumbnailMap: Record<string, string> = {\n  'Vinyasa': meditationImage,\n  'Strength': powerYogaImage,\n  'Relaxation': indoorImage,\n  'Breathwork': meditationImage,\n  'Balance': powerYogaImage,\n};\n\nexport default function Exercises() {\n  const [videoModal, setVideoModal] = useState<{ open: boolean; exercise?: Exercise }>({ open: false });\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedLevel, setSelectedLevel] = useState('all');\n\n  const { data: exercises = [], isLoading } = useQuery<Exercise[]>({\n    queryKey: ['/api/exercises'],\n  });\n\n  const filteredExercises = exercises.filter((exercise) => {\n    const matchesSearch = exercise.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         exercise.description.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesLevel = selectedLevel === 'all' || exercise.level === selectedLevel;\n    return matchesSearch && matchesLevel;\n  });\n\n  const handlePlayVideo = (exercise: any) => {\n    setVideoModal({ open: true, exercise });\n  };\n\n  return (\n    <div className=\"min-h-screen\">\n      <Navbar />\n      \n      <div className=\"container mx-auto px-4 py-12\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold mb-2\">Exercise Library</h1>\n          <p className=\"text-muted-foreground font-serif\">Watch instructional videos to perfect your practice</p>\n        </div>\n\n        <div className=\"mb-8\">\n          <div className=\"relative max-w-full md:max-w-md\">\n            <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search exercises...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-9\"\n              data-testid=\"input-search\"\n            />\n          </div>\n        </div>\n\n        <Tabs value={selectedLevel} onValueChange={setSelectedLevel} className=\"mb-8\">\n          <TabsList className=\"grid w-full grid-cols-2 sm:grid-cols-4\">\n            <TabsTrigger value=\"all\" data-testid=\"tab-all\">All Levels</TabsTrigger>\n            <TabsTrigger value=\"Beginner\" data-testid=\"tab-beginner\">Beginner</TabsTrigger>\n            <TabsTrigger value=\"Intermediate\" data-testid=\"tab-intermediate\">Intermediate</TabsTrigger>\n            <TabsTrigger value=\"Advanced\" data-testid=\"tab-advanced\">Advanced</TabsTrigger>\n          </TabsList>\n        </Tabs>\n\n        {isLoading ? (\n          <div className=\"text-center py-12\">\n            <p className=\"text-muted-foreground\">Loading exercises...</p>\n          </div>\n        ) : (\n          <>\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredExercises.map((exercise) => (\n                <ExerciseCard\n                  key={exercise.id}\n                  {...exercise}\n                  thumbnailUrl={thumbnailMap[exercise.category] || indoorImage}\n                  onPlay={() => handlePlayVideo(exercise)}\n                />\n              ))}\n            </div>\n\n            {filteredExercises.length === 0 && !isLoading && (\n              <div className=\"text-center py-12\">\n                <p className=\"text-muted-foreground\">No exercises found matching your search</p>\n              </div>\n            )}\n          </>\n        )}\n      </div>\n\n      <VideoModal\n        open={videoModal.open}\n        onClose={() => setVideoModal({ open: false })}\n        videoUrl={videoModal.exercise?.videoUrl}\n        title={videoModal.exercise?.title}\n      />\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":4371},"client/src/pages/Home.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Navbar } from \"@/components/Navbar\";\nimport { Footer } from \"@/components/Footer\";\nimport { Heart, Target, Users } from \"lucide-react\";\nimport heroImage from  '@assets/generated_images/Indoor_yoga_studio_session_520d01bc.png';\n\nexport default function Home() {\n  const benefits = [\n    {\n      icon: Heart,\n      title: \"Holistic Wellness\",\n      description:\n        \"Transform your mind, body, and spirit through ancient yoga practices\",\n    },\n    {\n      icon: Target,\n      title: \"Expert Guidance\",\n      description: \"Learn from certified instructors with years of experience\",\n    },\n    {\n      icon: Users,\n      title: \"Community Support\",\n      description: \"Join a vibrant community of wellness enthusiasts\",\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen\">\n      <Navbar />\n\n      <section className=\"relative h-[60vh] md:h-[85vh] flex items-center justify-center overflow-hidden\">\n        <div\n          className=\"absolute inset-0 bg-cover bg-center\"\n          style={{ backgroundImage: `url(${heroImage})` }}\n        />\n        <div className=\"absolute inset-0 bg-gradient-to-t from-black/70 via-black/40 to-black/20\" />\n\n        <div className=\"relative z-10 container mx-auto px-4 text-center text-white\">\n          <h1 className=\"text-3xl sm:text-4xl md:text-6xl lg:text-7xl font-bold mb-4 md:mb-6\">\n            Sarvaswasthyam Yoga & Fitness\n          </h1>\n          <p className=\"text-base sm:text-lg md:text-2xl mb-6 md:mb-8 max-w-2xl mx-auto font-serif\">\n            Transform your wellness journey with expert-led yoga sessions and\n            personalized fitness programs\n          </p>\n          <div className=\"flex flex-wrap items-center justify-center gap-4\">\n            <Link href=\"/sessions\">\n              <a>\n                <Button\n                  size=\"lg\"\n                  className=\"text-lg px-8\"\n                  data-testid=\"button-browse-sessions\"\n                >\n                  Browse Sessions\n                </Button>\n              </a>\n            </Link>\n            <Link href=\"/exercises\">\n              <a>\n                <Button\n                  size=\"lg\"\n                  variant=\"outline\"\n                  className=\"text-lg px-8 bg-background/20 backdrop-blur-sm border-white/30 text-white hover:bg-background/30\"\n                  data-testid=\"button-watch-videos\"\n                >\n                  Watch Videos\n                </Button>\n              </a>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      <section className=\"py-20 bg-background\">\n        <div className=\"container mx-auto px-4\">\n          <h2 className=\"text-3xl md:text-4xl font-bold text-center mb-12\">\n            Why Choose Sarvaswasthyam\n          </h2>\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {benefits.map((benefit, index) => (\n              <Card key={index} className=\"text-center\">\n                <CardContent className=\"pt-12 pb-8 px-6\">\n                  <div className=\"mx-auto mb-6 flex h-16 w-16 items-center justify-center rounded-full bg-primary/10\">\n                    <benefit.icon className=\"h-8 w-8 text-primary\" />\n                  </div>\n                  <h3 className=\"text-xl font-semibold mb-3\">\n                    {benefit.title}\n                  </h3>\n                  <p className=\"text-muted-foreground font-serif\">\n                    {benefit.description}\n                  </p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      <section className=\"py-20 bg-muted/30\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h2 className=\"text-3xl md:text-4xl font-bold mb-6\">\n            Begin Your Journey Today\n          </h2>\n          <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto font-serif\">\n            Join thousands of members who have transformed their lives through\n            yoga and fitness\n          </p>\n          <Link href=\"/login\">\n            <a>\n              <Button\n                size=\"lg\"\n                className=\"text-lg px-8\"\n                data-testid=\"button-get-started\"\n              >\n                Get Started\n              </Button>\n            </a>\n          </Link>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":4478},"client/src/pages/Login.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useAuth } from '@/contexts/DemoAuthContext';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { login, register } = useAuth();\n  const { toast } = useToast();\n  const [loginType, setLoginType] = useState<'user' | 'admin'>('user');\n  const [loginForm, setLoginForm] = useState({ username: '', password: '' });\n  const [signupForm, setSignupForm] = useState({ \n    username: '', \n    password: '', \n    email: '', \n    fullName: '' \n  });\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    const success = await login(loginForm.username, loginForm.password);\n    if (success) {\n      toast({ title: 'Welcome back!', description: 'You have successfully logged in.' });\n      setLocation('/');\n    } else {\n      toast({ \n        title: 'Login failed', \n        description: 'Invalid username or password',\n        variant: 'destructive'\n      });\n    }\n  };\n\n  const handleSignup = async (e: React.FormEvent) => {\n    e.preventDefault();\n    const result = await register(\n      signupForm.username, \n      signupForm.password, \n      signupForm.email, \n      signupForm.fullName\n    );\n    \n    if (result.success) {\n      toast({ \n        title: 'Account created!', \n        description: 'Welcome to Sarvaswasthyam Yoga & Fitness!' \n      });\n      setLocation('/');\n    } else {\n      toast({ \n        title: 'Signup failed', \n        description: result.error || 'Please try again',\n        variant: 'destructive'\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-primary/10 via-background to-accent/10 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"mx-auto mb-4 flex h-16 w-16 items-center justify-center rounded-full bg-primary text-primary-foreground\">\n            <span className=\"text-2xl font-bold\">S</span>\n          </div>\n          <CardTitle className=\"text-2xl\">Welcome</CardTitle>\n          <CardDescription>Sign in or create a new account</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Tabs defaultValue=\"signin\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"signin\">Sign In</TabsTrigger>\n              <TabsTrigger value=\"signup\">Sign Up</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"signin\">\n              <div className=\"space-y-4\">\n                <div className=\"flex gap-2 mb-4\">\n                  <Button\n                    type=\"button\"\n                    variant={loginType === 'user' ? 'default' : 'outline'}\n                    onClick={() => setLoginType('user')}\n                    className=\"flex-1\"\n                  >\n                    User\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    variant={loginType === 'admin' ? 'default' : 'outline'}\n                    onClick={() => setLoginType('admin')}\n                    className=\"flex-1\"\n                  >\n                    Admin\n                  </Button>\n                </div>\n                \n                <form onSubmit={handleLogin} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"login-username\">Username</Label>\n                    <Input\n                      id=\"login-username\"\n                      value={loginForm.username}\n                      onChange={(e) => setLoginForm({ ...loginForm, username: e.target.value })}\n                      placeholder=\"Enter your username\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"login-password\">Password</Label>\n                    <Input\n                      id=\"login-password\"\n                      type=\"password\"\n                      value={loginForm.password}\n                      onChange={(e) => setLoginForm({ ...loginForm, password: e.target.value })}\n                      placeholder=\"Enter your password\"\n                      required\n                    />\n                  </div>\n                  <Button type=\"submit\" className=\"w-full\">\n                    Sign In as {loginType === 'admin' ? 'Admin' : 'User'}\n                  </Button>\n                </form>\n              </div>\n            </TabsContent>\n            \n            <TabsContent value=\"signup\">\n              <form onSubmit={handleSignup} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"signup-fullname\">Full Name</Label>\n                  <Input\n                    id=\"signup-fullname\"\n                    value={signupForm.fullName}\n                    onChange={(e) => setSignupForm({ ...signupForm, fullName: e.target.value })}\n                    placeholder=\"Enter your full name\"\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"signup-username\">Username</Label>\n                  <Input\n                    id=\"signup-username\"\n                    value={signupForm.username}\n                    onChange={(e) => setSignupForm({ ...signupForm, username: e.target.value })}\n                    placeholder=\"Choose a username\"\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"signup-email\">Email</Label>\n                  <Input\n                    id=\"signup-email\"\n                    type=\"email\"\n                    value={signupForm.email}\n                    onChange={(e) => setSignupForm({ ...signupForm, email: e.target.value })}\n                    placeholder=\"Enter your email\"\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"signup-password\">Password</Label>\n                  <Input\n                    id=\"signup-password\"\n                    type=\"password\"\n                    value={signupForm.password}\n                    onChange={(e) => setSignupForm({ ...signupForm, password: e.target.value })}\n                    placeholder=\"Create a password\"\n                    required\n                  />\n                </div>\n                <Button type=\"submit\" className=\"w-full\">\n                  Create Account\n                </Button>\n              </form>\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7119},"client/src/pages/Sessions.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Navbar } from '@/components/Navbar';\nimport { Footer } from '@/components/Footer';\nimport { SessionCard } from '@/components/SessionCard';\nimport { BookingModal } from '@/components/BookingModal';\nimport { Button } from '@/components/ui/button';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport type { Session } from '@shared/schema';\nimport indoorImage from '@assets/generated_images/Indoor_yoga_studio_session_520d01bc.png';\nimport meditationImage from '@assets/generated_images/Meditation_session_image_9674324d.png';\nimport powerYogaImage from '@assets/generated_images/Power_yoga_session_0ab6d541.png';\n\nconst imageMap: Record<string, string> = {\n  'Hatha': indoorImage,\n  'Meditation': meditationImage,\n  'Vinyasa': powerYogaImage,\n  'Restorative': indoorImage,\n  'Ashtanga': powerYogaImage,\n  'Yin': meditationImage,\n};\n\nexport default function Sessions() {\n  const [bookingModal, setBookingModal] = useState<{ open: boolean; session?: Session }>({ open: false });\n  const [categoryFilter, setCategoryFilter] = useState('all');\n  const [levelFilter, setLevelFilter] = useState('all');\n\n  const { data: sessions = [], isLoading } = useQuery<Session[]>({\n    queryKey: ['/api/sessions'],\n  });\n\n  const filteredSessions = sessions.filter((session) => {\n    if (categoryFilter !== 'all' && session.category !== categoryFilter) return false;\n    if (levelFilter !== 'all' && session.level !== levelFilter) return false;\n    return true;\n  });\n\n  const handleBookSession = (session: Session) => {\n    setBookingModal({ open: true, session });\n  };\n\n  return (\n    <div className=\"min-h-screen\">\n      <Navbar />\n      \n      <div className=\"container mx-auto px-4 py-12\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold mb-2\">Yoga Sessions</h1>\n          <p className=\"text-muted-foreground font-serif\">Browse and book from our expert-led yoga classes</p>\n        </div>\n\n        <div className=\"mb-8 flex flex-wrap items-center gap-4\">\n          <div className=\"space-y-2 w-full sm:w-auto\">\n            <Label>Category</Label>\n            <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n              <SelectTrigger className=\"w-full sm:w-48\" data-testid=\"select-category\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Categories</SelectItem>\n                <SelectItem value=\"Hatha\">Hatha</SelectItem>\n                <SelectItem value=\"Vinyasa\">Vinyasa</SelectItem>\n                <SelectItem value=\"Meditation\">Meditation</SelectItem>\n                <SelectItem value=\"Restorative\">Restorative</SelectItem>\n                <SelectItem value=\"Ashtanga\">Ashtanga</SelectItem>\n                <SelectItem value=\"Yin\">Yin</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2 w-full sm:w-auto\">\n            <Label>Level</Label>\n            <Select value={levelFilter} onValueChange={setLevelFilter}>\n              <SelectTrigger className=\"w-full sm:w-48\" data-testid=\"select-level\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Levels</SelectItem>\n                <SelectItem value=\"Beginner\">Beginner</SelectItem>\n                <SelectItem value=\"Intermediate\">Intermediate</SelectItem>\n                <SelectItem value=\"Advanced\">Advanced</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {(categoryFilter !== 'all' || levelFilter !== 'all') && (\n            <Button\n              variant=\"ghost\"\n              onClick={() => {\n                setCategoryFilter('all');\n                setLevelFilter('all');\n              }}\n              className=\"mt-auto\"\n              data-testid=\"button-clear-filters\"\n            >\n              Clear Filters\n            </Button>\n          )}\n        </div>\n\n        {isLoading ? (\n          <div className=\"text-center py-12\">\n            <p className=\"text-muted-foreground\">Loading sessions...</p>\n          </div>\n        ) : (\n          <>\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredSessions.map((session) => (\n                <SessionCard\n                  key={session.id}\n                  {...session}\n                  imageUrl={imageMap[session.category] || indoorImage}\n                  onBook={() => handleBookSession(session)}\n                />\n              ))}\n            </div>\n\n            {filteredSessions.length === 0 && !isLoading && (\n              <div className=\"text-center py-12\">\n                <p className=\"text-muted-foreground\">No sessions found matching your filters</p>\n              </div>\n            )}\n          </>\n        )}\n      </div>\n\n      <BookingModal\n        open={bookingModal.open}\n        onClose={() => setBookingModal({ open: false })}\n        sessionId={bookingModal.session?.id}\n        sessionTitle={bookingModal.session?.title}\n        sessionPrice={bookingModal.session?.price}\n      />\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":5331},"client/src/pages/UserDashboard.tsx":{"content":"import { Navbar } from '@/components/Navbar';\nimport { Footer } from '@/components/Footer';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { useAuth } from '@/contexts/DemoAuthContext';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { mockApi } from '@/lib/mockApi';\nimport { useToast } from '@/hooks/use-toast';\nimport { Calendar, Clock, User, Mail, X } from 'lucide-react';\nimport type { Booking, Session } from '@shared/schema';\n\ninterface BookingWithSession extends Booking {\n  session?: Session;\n}\n\nexport default function UserDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  const { data: bookings = [], isLoading } = useQuery<Booking[]>({\n    queryKey: ['/api/bookings'],\n  });\n\n  const { data: sessions = [] } = useQuery<Session[]>({\n    queryKey: ['/api/sessions'],\n  });\n\n  const bookingsWithSessions: BookingWithSession[] = bookings.map((booking) => ({\n    ...booking,\n    session: sessions.find((s) => s.id === booking.sessionId),\n  }));\n\n  const cancelBookingMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await mockApi.bookings.cancel(id);\n    },\n    onSuccess: () => {\n      toast({ \n        title: 'Booking cancelled', \n        description: 'Your booking has been cancelled successfully.' \n      });\n      window.location.reload();\n    },\n    onError: () => {\n      toast({ \n        title: 'Cancellation failed', \n        description: 'Unable to cancel booking. Please try again.',\n        variant: 'destructive'\n      });\n    },\n  });\n\n  const handleCancelBooking = (id: string) => {\n    if (confirm('Are you sure you want to cancel this booking?')) {\n      cancelBookingMutation.mutate(id);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen\">\n      <Navbar />\n      \n      <div className=\"container mx-auto px-4 py-12\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold mb-2\">My Dashboard</h1>\n          <p className=\"text-muted-foreground font-serif\">Manage your bookings and profile</p>\n        </div>\n\n        <div className=\"grid sm:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-base md:text-lg\">Upcoming Sessions</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl md:text-3xl font-bold\">{bookings.length}</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-base md:text-lg\">Total Bookings</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl md:text-3xl font-bold\">{bookings.length}</div>\n            </CardContent>\n          </Card>\n          <Card className=\"sm:col-span-2 lg:col-span-1\">\n            <CardHeader>\n              <CardTitle className=\"text-base md:text-lg\">Member Since</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-xl md:text-2xl font-bold\">2024</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-6\">\n          <div className=\"lg:col-span-2 order-2 lg:order-1\">\n            <Card>\n              <CardHeader>\n                <CardTitle>My Bookings</CardTitle>\n                <CardDescription>Your upcoming yoga sessions</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {isLoading ? (\n                  <p className=\"text-sm text-muted-foreground\">Loading bookings...</p>\n                ) : bookingsWithSessions.length === 0 ? (\n                  <p className=\"text-sm text-muted-foreground\">No bookings yet. Book a session to get started!</p>\n                ) : (\n                  bookingsWithSessions.map((booking) => (\n                    <div\n                      key={booking.id}\n                      className=\"flex flex-wrap items-center justify-between gap-4 rounded-lg border p-4\"\n                      data-testid={`booking-${booking.id}`}\n                    >\n                      <div className=\"space-y-1 flex-1\">\n                        <h3 className=\"font-semibold\">{booking.session?.title || 'Unknown Session'}</h3>\n                        <p className=\"text-sm text-muted-foreground\">{booking.session?.instructor || 'Unknown Instructor'}</p>\n                        <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                          <div className=\"flex items-center gap-1\">\n                            <Calendar className=\"h-3 w-3\" />\n                            <span>{booking.sessionDate}</span>\n                          </div>\n                          <div className=\"flex items-center gap-1\">\n                            <Clock className=\"h-3 w-3\" />\n                            <span>{booking.session?.schedule || 'TBD'}</span>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Badge variant=\"secondary\">{booking.status}</Badge>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          onClick={() => handleCancelBooking(booking.id)}\n                          disabled={cancelBookingMutation.isPending}\n                          data-testid={`button-cancel-${booking.id}`}\n                        >\n                          <X className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"order-1 lg:order-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Profile</CardTitle>\n                <CardDescription>Your account information</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"flex h-12 w-12 items-center justify-center rounded-full bg-primary text-primary-foreground\">\n                    <User className=\"h-6 w-6\" />\n                  </div>\n                  <div>\n                    <p className=\"font-medium\">{user?.fullName || user?.username}</p>\n                    <p className=\"text-sm text-muted-foreground\">Member</p>\n                  </div>\n                </div>\n                <div className=\"space-y-2 pt-4 border-t\">\n                  <div className=\"flex items-center gap-2 text-sm\">\n                    <Mail className=\"h-4 w-4 text-muted-foreground\" />\n                    <span>{user?.email}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2 text-sm\">\n                    <User className=\"h-4 w-4 text-muted-foreground\" />\n                    <span>@{user?.username}</span>\n                  </div>\n                </div>\n                <Button variant=\"outline\" className=\"w-full mt-4\" data-testid=\"button-edit-profile\">\n                  Edit Profile\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":7458},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/BookingModal.tsx":{"content":"import { useState } from 'react';\nimport { BookingModal } from '../BookingModal';\nimport { Button } from '@/components/ui/button';\n\nexport default function BookingModalExample() {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <div className=\"p-8\">\n      <Button onClick={() => setOpen(true)}>Open Booking Modal</Button>\n      <BookingModal\n        open={open}\n        onClose={() => setOpen(false)}\n        sessionTitle=\"Morning Hatha Yoga\"\n        sessionPrice={25}\n      />\n    </div>\n  );\n}\n","size_bytes":507},"client/src/components/examples/ExerciseCard.tsx":{"content":"import { ExerciseCard } from '../ExerciseCard';\nimport meditationImage from '@assets/generated_images/Meditation_session_image_9674324d.png';\n\nexport default function ExerciseCardExample() {\n  return (\n    <div className=\"p-8 max-w-sm\">\n      <ExerciseCard\n        id=\"1\"\n        title=\"Sun Salutation Flow\"\n        description=\"Learn the classic sun salutation sequence for morning energy\"\n        duration={15}\n        level=\"Beginner\"\n        category=\"Vinyasa\"\n        thumbnailUrl={meditationImage}\n        onPlay={(id) => console.log('Play exercise:', id)}\n      />\n    </div>\n  );\n}\n","size_bytes":590},"client/src/components/examples/Navbar.tsx":{"content":"import { Navbar } from '../Navbar';\nimport { AuthProvider } from '@/contexts/AuthContext';\n\nexport default function NavbarExample() {\n  return (\n    <AuthProvider>\n      <Navbar />\n    </AuthProvider>\n  );\n}\n","size_bytes":208},"client/src/components/examples/SessionCard.tsx":{"content":"import { SessionCard } from '../SessionCard';\nimport heroImage from '@assets/generated_images/Indoor_yoga_studio_session_520d01bc.png';\n\nexport default function SessionCardExample() {\n  return (\n    <div className=\"p-8 max-w-sm\">\n      <SessionCard\n        id=\"1\"\n        title=\"Morning Hatha Yoga\"\n        instructor=\"Priya Sharma\"\n        category=\"Hatha\"\n        level=\"Beginner\"\n        duration={60}\n        price={25}\n        schedule=\"Mon, Wed, Fri 7AM\"\n        currentParticipants={8}\n        maxParticipants={15}\n        imageUrl={heroImage}\n        onBook={(id) => console.log('Book session:', id)}\n      />\n    </div>\n  );\n}\n","size_bytes":636},"client/src/components/examples/StatCard.tsx":{"content":"import { StatCard } from '../StatCard';\nimport { Calendar } from 'lucide-react';\n\nexport default function StatCardExample() {\n  return (\n    <div className=\"p-8 max-w-xs\">\n      <StatCard\n        title=\"Total Bookings\"\n        value={247}\n        icon={Calendar}\n        description=\"+12% from last month\"\n      />\n    </div>\n  );\n}\n","size_bytes":333},"client/src/components/examples/ThemeToggle.tsx":{"content":"import { ThemeToggle } from '../ThemeToggle';\n\nexport default function ThemeToggleExample() {\n  return <ThemeToggle />;\n}\n","size_bytes":122},"client/src/components/examples/VideoModal.tsx":{"content":"import { useState } from 'react';\nimport { VideoModal } from '../VideoModal';\nimport { Button } from '@/components/ui/button';\n\nexport default function VideoModalExample() {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <div className=\"p-8\">\n      <Button onClick={() => setOpen(true)}>Play Video</Button>\n      <VideoModal\n        open={open}\n        onClose={() => setOpen(false)}\n        videoUrl=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"\n        title=\"Sun Salutation Tutorial\"\n      />\n    </div>\n  );\n}\n","size_bytes":526},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"netlify.toml":{"content":"[build]\n  publish = \"dist\"\n  command = \"npm run build\"\n\n[[redirects]]\n  from = \"/*\"\n  to = \"/index.html\"\n  status = 200\n","size_bytes":120},"client/src/contexts/DemoAuthContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { mockUser, mockAdmin } from '@/lib/mockData';\n\ninterface User {\n  id: string;\n  username: string;\n  email: string;\n  role: 'user' | 'admin';\n  fullName?: string | null;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  login: (username: string, password: string) => Promise<boolean>;\n  register: (username: string, password: string, email: string, fullName: string) => Promise<{ success: boolean; error?: string }>;\n  logout: () => Promise<void>;\n  isAuthenticated: boolean;\n  isAdmin: boolean;\n  loading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function DemoAuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const storedUser = localStorage.getItem('demoUser');\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n    }\n    setLoading(false);\n  }, []);\n\n  const login = async (username: string, password: string) => {\n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    let loggedInUser: User | null = null;\n    \n    if (username === 'demo' && password === 'demo') {\n      loggedInUser = mockUser;\n    } else if (username === 'admin' && password === 'admin') {\n      loggedInUser = mockAdmin;\n    }\n    \n    if (loggedInUser) {\n      setUser(loggedInUser);\n      localStorage.setItem('demoUser', JSON.stringify(loggedInUser));\n      return true;\n    }\n    \n    return false;\n  };\n\n  const register = async (username: string, password: string, email: string, fullName: string) => {\n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    const newUser: User = {\n      id: `user-${Date.now()}`,\n      username,\n      email,\n      fullName,\n      role: 'user',\n    };\n    \n    setUser(newUser);\n    localStorage.setItem('demoUser', JSON.stringify(newUser));\n    return { success: true };\n  };\n\n  const logout = async () => {\n    setUser(null);\n    localStorage.removeItem('demoUser');\n  };\n\n  const value = {\n    user,\n    login,\n    register,\n    logout,\n    isAuthenticated: !!user,\n    isAdmin: user?.role === 'admin',\n    loading,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n","size_bytes":2536},"client/src/lib/demoQueryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\nimport { mockApi } from \"./mockApi\";\n\nexport const getDemoQueryFn: <T>() => QueryFunction<T> = <T,>() => async ({ queryKey }): Promise<T> => {\n  const path = queryKey.join(\"/\");\n  \n  if (path.includes('/api/sessions')) {\n    return await mockApi.sessions.getAll() as T;\n  }\n  \n  if (path.includes('/api/exercises')) {\n    return await mockApi.exercises.getAll() as T;\n  }\n  \n  if (path.includes('/api/bookings')) {\n    return await mockApi.bookings.getAll() as T;\n  }\n  \n  if (path.includes('/api/announcements')) {\n    return await mockApi.announcements.getAll() as T;\n  }\n  \n  return [] as T;\n};\n\nexport const demoQueryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getDemoQueryFn(),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":956},"client/src/lib/mockApi.ts":{"content":"import { mockSessions, mockExercises, mockBookings, mockAnnouncements } from './mockData';\n\nconst delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n\nexport const mockApi = {\n  sessions: {\n    getAll: async () => {\n      await delay(300);\n      return mockSessions;\n    },\n    getById: async (id: string) => {\n      await delay(200);\n      return mockSessions.find(s => s.id === id);\n    },\n  },\n  \n  exercises: {\n    getAll: async () => {\n      await delay(300);\n      return mockExercises;\n    },\n  },\n  \n  bookings: {\n    getAll: async () => {\n      await delay(300);\n      const storedBookings = localStorage.getItem('demoBookings');\n      return storedBookings ? JSON.parse(storedBookings) : mockBookings;\n    },\n    create: async (sessionId: string, sessionDate: Date) => {\n      await delay(400);\n      const session = mockSessions.find(s => s.id === sessionId);\n      if (!session) throw new Error('Session not found');\n      \n      const newBooking = {\n        id: `booking-${Date.now()}`,\n        userId: 'user-1',\n        sessionId,\n        sessionDate,\n        status: 'confirmed' as const,\n        createdAt: new Date(),\n        session,\n      };\n      \n      const storedBookings = localStorage.getItem('demoBookings');\n      const bookings = storedBookings ? JSON.parse(storedBookings) : mockBookings;\n      const updatedBookings = [...bookings, newBooking];\n      localStorage.setItem('demoBookings', JSON.stringify(updatedBookings));\n      \n      return newBooking;\n    },\n    cancel: async (id: string) => {\n      await delay(300);\n      const storedBookings = localStorage.getItem('demoBookings');\n      const bookings = storedBookings ? JSON.parse(storedBookings) : mockBookings;\n      const updatedBookings = bookings.filter((b: any) => b.id !== id);\n      localStorage.setItem('demoBookings', JSON.stringify(updatedBookings));\n    },\n  },\n  \n  announcements: {\n    getAll: async () => {\n      await delay(200);\n      return mockAnnouncements;\n    },\n  },\n};\n","size_bytes":2002}},"version":1}